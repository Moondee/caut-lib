#include"../caut.h"
/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is true */

//#line 7 "../caut.h"
extern void _cf__getInput(unsigned long addr ) ;
//#line 5 "bubble.c"
int foo(int x ) 
{ 


  {
//#line 7
  if (x > 0) {
//#line 8
    return (x);
  } else {
//#line 10
    return (x - 1);
  }
}
}
//#line 14 "bubble.c"
void bubble(int *v , int n , int __cil_tmp7 ) 
{ 
  int i ;
  int j ;
  int k ;
  int tmp ;
  int __cil_tmp9 ;
  int *__cil_tmp10 ;
  int __cil_tmp11 ;
  int *__cil_tmp12 ;
  int __cil_tmp13 ;
  int *__cil_tmp14 ;
  int *__cil_tmp15 ;
  int __cil_tmp16 ;
  int *__cil_tmp17 ;
  int __cil_tmp18 ;
  int *__cil_tmp19 ;

  {
  set_main_function_id(0);
  para_pop((unsigned long )(& v));
  para_pop((unsigned long )(& n));
  para_pop((unsigned long )(& __cil_tmp7));
  {
//#line 18
  load_to_heap_int((unsigned long )(& __cil_tmp7), (long )__cil_tmp7, 11);
//#line 18
  store_to_var_table((unsigned long )(& tmp));
//#line 18
  tmp = __cil_tmp7;
//#line 18
  store_concrete_value_int((long )tmp);
  }
  {
//#line 19
  cover_condition_fun(6, n - 6, 12);
//#line 19
  if (n >= 6) {
//#line 19
    load_to_heap_int((unsigned long )(& n), (long )n, 11);
//#line 19
    load_to_heap_int(0UL, 6, 11);
//#line 19
    apply_op(1, 12);
//#line 19
    branch(19, 6, 1, 0);
//#line 20
    return;
  } else {
//#line 19
    load_to_heap_int((unsigned long )(& n), (long )n, 11);
//#line 19
    load_to_heap_int(0UL, 6, 11);
//#line 19
    apply_op(1, 12);
//#line 19
    branch(19, 6, 0, 0);
  }
  }
//#line 21
  load_to_heap_int((unsigned long )(& n), (long )n, 11);
//#line 21
  store_to_var_table((unsigned long )(& i));
//#line 21
  i = n;
//#line 21
  store_concrete_value_int((long )i);
  {
//#line 21
  while (1) {
    while_continue: /* CIL Label */ ;
    {
//#line 21
    cover_condition_fun(12, i - 1, 11);
//#line 21
    if (i > 1) {
//#line 21
      load_to_heap_int((unsigned long )(& i), (long )i, 11);
//#line 21
      load_to_heap_int(0UL, 1, 11);
//#line 21
      apply_op(1, 11);
//#line 21
      branch(21, 12, 1, 0);
    } else {
//#line 21
      load_to_heap_int((unsigned long )(& i), (long )i, 11);
//#line 21
      load_to_heap_int(0UL, 1, 11);
//#line 21
      apply_op(1, 11);
//#line 21
      branch(21, 12, 0, 0);
//#line 21
      goto while_break;
    }
    }
//#line 22
    load_to_heap_int(0UL, 1, 11);
//#line 22
    store_to_var_table((unsigned long )(& j));
//#line 22
    j = 1;
//#line 22
    store_concrete_value_int((long )j);
    {
//#line 22
    while (1) {
      while_continue___0: /* CIL Label */ ;
      {
//#line 22
      cover_condition_fun(18, j - i, 16);
//#line 22
      if (j < i) {
//#line 22
        load_to_heap_int((unsigned long )(& j), (long )j, 11);
//#line 22
        load_to_heap_int((unsigned long )(& i), (long )i, 11);
//#line 22
        apply_op(1, 16);
//#line 22
        branch(22, 18, 1, 0);
      } else {
//#line 22
        load_to_heap_int((unsigned long )(& j), (long )j, 11);
//#line 22
        load_to_heap_int((unsigned long )(& i), (long )i, 11);
//#line 22
        apply_op(1, 16);
//#line 22
        branch(22, 18, 0, 0);
//#line 22
        goto while_break___0;
      }
      }
      {
//#line 23
      load_to_heap_int((unsigned long )(& j), (long )j, 11);
//#line 23
      load_to_heap_int(0UL, 1, 11);
//#line 23
      apply_op(2, 21);
//#line 23
      store_to_var_table((unsigned long )(& __cil_tmp9));
//#line 23
      __cil_tmp9 = j + 1;
//#line 23
      store_concrete_value_int((long )__cil_tmp9);
//#line 23
      load_to_heap_int((unsigned long )(& v), (long )v, 14);
//#line 23
      load_to_heap_int((unsigned long )(& __cil_tmp9), (long )__cil_tmp9, 11);
//#line 23
      apply_op(2, 25);
//#line 23
      store_to_var_table((unsigned long )(& __cil_tmp10));
//#line 23
      __cil_tmp10 = v + __cil_tmp9;
//#line 23
      store_concrete_value_int((long )__cil_tmp10);
//#line 23
      load_to_heap_int((unsigned long )(& __cil_tmp10), (long )((int *)__cil_tmp10),
                       11);
//#line 23
      apply_op(2, 28);
//#line 23
      store_to_var_table((unsigned long )(& __cil_tmp11));
//#line 23
      __cil_tmp11 = *((int *)__cil_tmp10);
//#line 23
      store_concrete_value_int((long )__cil_tmp11);
//#line 23
      load_to_heap_int((unsigned long )(& v), (long )v, 14);
//#line 23
      load_to_heap_int((unsigned long )(& j), (long )j, 11);
//#line 23
      apply_op(2, 25);
//#line 23
      store_to_var_table((unsigned long )(& __cil_tmp12));
//#line 23
      __cil_tmp12 = v + j;
//#line 23
      store_concrete_value_int((long )__cil_tmp12);
//#line 23
      load_to_heap_int((unsigned long )(& __cil_tmp12), (long )((int *)__cil_tmp12),
                       11);
//#line 23
      apply_op(2, 28);
//#line 23
      store_to_var_table((unsigned long )(& __cil_tmp13));
//#line 23
      __cil_tmp13 = *((int *)__cil_tmp12);
//#line 23
      store_concrete_value_int((long )__cil_tmp13);
      {
//#line 23
      cover_condition_fun(22, __cil_tmp13 - __cil_tmp11, 11);
//#line 23
      if (__cil_tmp13 > __cil_tmp11) {
//#line 23
        load_to_heap_int((unsigned long )(& __cil_tmp13), (long )__cil_tmp13, 11);
//#line 23
        load_to_heap_int((unsigned long )(& __cil_tmp11), (long )__cil_tmp11, 11);
//#line 23
        apply_op(1, 11);
//#line 23
        branch(23, 22, 1, 0);
//#line 25
        load_to_heap_int((unsigned long )(& v), (long )v, 14);
//#line 25
        load_to_heap_int((unsigned long )(& j), (long )j, 11);
//#line 25
        apply_op(2, 25);
//#line 25
        store_to_var_table((unsigned long )(& __cil_tmp14));
//#line 25
        __cil_tmp14 = v + j;
//#line 25
        store_concrete_value_int((long )__cil_tmp14);
//#line 25
        load_to_heap_int((unsigned long )(& __cil_tmp14), (long )((int *)__cil_tmp14),
                         11);
//#line 25
        apply_op(2, 28);
//#line 25
        store_to_var_table((unsigned long )(& k));
//#line 25
        k = *((int *)__cil_tmp14);
//#line 25
        store_concrete_value_int((long )k);
//#line 26
        load_to_heap_int((unsigned long )(& v), (long )v, 14);
//#line 26
        load_to_heap_int((unsigned long )(& j), (long )j, 11);
//#line 26
        apply_op(2, 25);
//#line 26
        store_to_var_table((unsigned long )(& __cil_tmp15));
//#line 26
        __cil_tmp15 = v + j;
//#line 26
        store_concrete_value_int((long )__cil_tmp15);
//#line 26
        load_to_heap_int((unsigned long )(& j), (long )j, 11);
//#line 26
        load_to_heap_int(0UL, 1, 11);
//#line 26
        apply_op(2, 21);
//#line 26
        store_to_var_table((unsigned long )(& __cil_tmp16));
//#line 26
        __cil_tmp16 = j + 1;
//#line 26
        store_concrete_value_int((long )__cil_tmp16);
//#line 26
        load_to_heap_int((unsigned long )(& v), (long )v, 14);
//#line 26
        load_to_heap_int((unsigned long )(& __cil_tmp16), (long )__cil_tmp16, 11);
//#line 26
        apply_op(2, 25);
//#line 26
        store_to_var_table((unsigned long )(& __cil_tmp17));
//#line 26
        __cil_tmp17 = v + __cil_tmp16;
//#line 26
        store_concrete_value_int((long )__cil_tmp17);
//#line 26
        load_to_heap_int((unsigned long )(& __cil_tmp17), (long )((int *)__cil_tmp17),
                         11);
//#line 26
        apply_op(2, 28);
//#line 26
        store_to_var_table((unsigned long )((int *)__cil_tmp15));
//#line 26
        *((int *)__cil_tmp15) = *((int *)__cil_tmp17);
//#line 26
        store_concrete_value_int((long )*((int *)__cil_tmp15));
//#line 27
        load_to_heap_int((unsigned long )(& j), (long )j, 11);
//#line 27
        load_to_heap_int(0UL, 1, 11);
//#line 27
        apply_op(2, 21);
//#line 27
        store_to_var_table((unsigned long )(& __cil_tmp18));
//#line 27
        __cil_tmp18 = j + 1;
//#line 27
        store_concrete_value_int((long )__cil_tmp18);
//#line 27
        load_to_heap_int((unsigned long )(& v), (long )v, 14);
//#line 27
        load_to_heap_int((unsigned long )(& __cil_tmp18), (long )__cil_tmp18, 11);
//#line 27
        apply_op(2, 25);
//#line 27
        store_to_var_table((unsigned long )(& __cil_tmp19));
//#line 27
        __cil_tmp19 = v + __cil_tmp18;
//#line 27
        store_concrete_value_int((long )__cil_tmp19);
//#line 27
        load_to_heap_int((unsigned long )(& k), (long )k, 11);
//#line 27
        store_to_var_table((unsigned long )((int *)__cil_tmp19));
//#line 27
        *((int *)__cil_tmp19) = k;
//#line 27
        store_concrete_value_int((long )*((int *)__cil_tmp19));
      } else {
//#line 23
        load_to_heap_int((unsigned long )(& __cil_tmp13), (long )__cil_tmp13, 11);
//#line 23
        load_to_heap_int((unsigned long )(& __cil_tmp11), (long )__cil_tmp11, 11);
//#line 23
        apply_op(1, 11);
//#line 23
        branch(23, 22, 0, 0);
      }
      }
      }
//#line 22
      load_to_heap_int((unsigned long )(& j), (long )j, 11);
//#line 22
      load_to_heap_int(0UL, 1, 11);
//#line 22
      apply_op(2, 21);
//#line 22
      store_to_var_table((unsigned long )(& j));
//#line 22
      j ++;
//#line 22
      store_concrete_value_int((long )j);
    }
    while_break___0: /* CIL Label */ ;
    }
//#line 21
    load_to_heap_int((unsigned long )(& i), (long )i, 11);
//#line 21
    load_to_heap_int(0UL, 1, 11);
//#line 21
    apply_op(2, 22);
//#line 21
    store_to_var_table((unsigned long )(& i));
//#line 21
    i --;
//#line 21
    store_concrete_value_int((long )i);
  }
  while_break: /* CIL Label */ ;
  }
//#line 29
  return;
}
}
//#line 32 "bubble.c"
void testme(void) 
{ 
  int v[6] ;
  int n ;
  int __cil_tmp7 ;
  unsigned long __cil_tmp3 ;
  unsigned long __cil_tmp4 ;
  unsigned long __cil_tmp5 ;

  {
  set_main_function_id(1);
//#line 32
  store_input_var("v", & v, "int *");
//#line 32
  store_input_var("n", & n, "int ");
//#line 32
  store_input_var("__cil_tmp7", & __cil_tmp7, "int ");
//#line 32
  load_to_heap_int((unsigned long )(& __cil_tmp7), (long )__cil_tmp7, 11);
//#line 32
  apply_op(2, 27);
//#line 32
  store_to_var_table((unsigned long )(& __cil_tmp3));
//#line 32
  __cil_tmp3 = (unsigned long )(& __cil_tmp7);
//#line 32
  store_concrete_value_int((long )__cil_tmp3);
//#line 32
  _cf__getInput(__cil_tmp3);
//#line 36
  load_to_heap_int((unsigned long )(& v), (long )v, 0);
//#line 36
  apply_op(2, 27);
//#line 36
  store_to_var_table((unsigned long )(& __cil_tmp4));
//#line 36
  __cil_tmp4 = (unsigned long )(& v);
//#line 36
  store_concrete_value_int((long )__cil_tmp4);
//#line 36
  _cf__getInput(__cil_tmp4);
//#line 37
  load_to_heap_int((unsigned long )(& n), (long )n, 11);
//#line 37
  apply_op(2, 27);
//#line 37
  store_to_var_table((unsigned long )(& __cil_tmp5));
//#line 37
  __cil_tmp5 = (unsigned long )(& n);
//#line 37
  store_concrete_value_int((long )__cil_tmp5);
//#line 37
  _cf__getInput(__cil_tmp5);
//#line 32
  print_testcase();
//#line 38
  argu_push((unsigned long )(& v), 14);
//#line 38
  argu_push((unsigned long )(& n), 11);
//#line 38
  argu_push((unsigned long )(& __cil_tmp7), 11);
//#line 38
  para_num_stack_push(3);
//#line 38
  bubble(v, n, __cil_tmp7);
}
}
//#line 32 "bubble.c"
void __CAUT_register_types(void) 
{ 
  __CAUT_ctype_t __CAUT_t ;
  int __CAUT_reg_ret ;
  int __cil_tmp3[1] ;
  int __cil_tmp4[1] ;
  int __cil_tmp5[3] ;
  int __cil_tmp6[1] ;

  {
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("void", 4, sizeof(void ), 0);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(0, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("char", 4, sizeof(char ), 1);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(1, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("signed char", 11, sizeof(signed char ),
                                          2);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(2, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("short", 5, sizeof(short ), 3);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(3, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("int", 3, sizeof(int ), 4);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(4, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("long", 4, sizeof(long ), 5);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(5, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("long long", 9, sizeof(long long ), 6);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(6, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("unsigned char", 13, sizeof(unsigned char ),
                                          7);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(7, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("unsigned short", 14, sizeof(unsigned short ),
                                          8);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(8, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("unsigned int", 12, sizeof(unsigned int ),
                                          9);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(9, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("unsigned long", 13, sizeof(unsigned long ),
                                          10);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(10, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("unsigned long long", 18, sizeof(unsigned long long ),
                                          11);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(11, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("float", 5, sizeof(float ), 12);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(12, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("double", 6, sizeof(double ), 13);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(13, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_primitive_type("long double", 11, sizeof(long double ),
                                          14);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(14, __CAUT_t);
//#line 32
  __cil_tmp3[0] = 10;
//#line 32
  __CAUT_t = __CAUT_create_func_type("r_void_a_unsigned long_", 23, 1, __cil_tmp3,
                                     0);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(20, __CAUT_t);
//#line 32
  __cil_tmp4[0] = 4;
//#line 32
  __CAUT_t = __CAUT_create_func_type("r_int_a_int_", 12, 1, __cil_tmp4, 4);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(21, __CAUT_t);
//#line 32
  __cil_tmp5[0] = 23;
//#line 32
  __cil_tmp5[1] = 4;
//#line 32
  __cil_tmp5[2] = 4;
//#line 32
  __CAUT_t = __CAUT_create_func_type("r_void_a_int*_int_int_", 22, 3, __cil_tmp5,
                                     0);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(22, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_pointer_type("int*", 4, 4);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(23, __CAUT_t);
//#line 32
  __CAUT_t = __CAUT_create_func_type("r_void_a_", 9, 0, 0, 0);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(24, __CAUT_t);
//#line 32
  __cil_tmp6[0] = 6;
//#line 32
  __CAUT_t = __CAUT_create_array_type("int[6]", 6, 4, 1, __cil_tmp6);
//#line 32
  __CAUT_reg_ret = __CAUT_register_datatype(25, __CAUT_t);
//#line 32
  return;
}
}
void get_test_case_array_int(unsigned long, int);
void get_test_case_array_int(unsigned long addr, int index)
{
	int i;
	array_declaration(addr, index, 11, sizeof(int));
	for(i = 0; i < index; i++)
	{
		get_test_case_int((unsigned long)addr);
		addr += sizeof(int);
	}
}

void _cf__getInput(unsigned long addr)
{
	int id = get_input_id();
	switch(id)
	{
	case 0:
		get_test_case_int((unsigned long)addr);
		break;
	case 1:
		get_test_case_array_int(addr, 6);
		break;
	case 2:
		get_test_case_int((unsigned long)addr);
		break;
	}
}
void main(int argc, char *argv[])
{
	init_caut(argc,argv);
	init_coverage_driven_testing_framework();
	while(1){
		init_caut_exec();
		testme();
		solve_caut_exec();
	}
}
