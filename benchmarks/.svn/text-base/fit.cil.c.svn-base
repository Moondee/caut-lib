#include"../caut.h"
/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is true */

//#line 6 "fit.c"
struct A {
   int i ;
   int *pp ;
};
//#line 7 "../caut.h"
extern void _cf__getInput(unsigned long addr ) ;
//#line 4 "fit.c"
int global_int  ;
//#line 5 "fit.c"
int *global_p  ;
//#line 11 "fit.c"
struct A *global_A  ;
//#line 13 "fit.c"
int testloop(int x , int *arr ) 
{ 
  int i ;
  int *__cil_tmp4 ;
  int __cil_tmp5 ;
  int *__cil_tmp6 ;
  int __cil_tmp7 ;

  {
  set_main_function_id(0);
  para_pop((unsigned long )(& x));
  para_pop((unsigned long )(& arr));
  {
//#line 28
  load_to_heap_int((unsigned long )(& global_int), (long )global_int, 11);
//#line 28
  apply_op(2, 27);
//#line 28
  store_to_var_table((unsigned long )(& __cil_tmp4));
//#line 28
  __cil_tmp4 = & global_int;
//#line 28
  store_concrete_value_int((long )__cil_tmp4);
//#line 28
  load_to_heap_int((unsigned long )(& __cil_tmp4), (long )__cil_tmp4, 11);
//#line 28
  apply_op(2, 28);
//#line 28
  store_to_var_table((unsigned long )(& __cil_tmp5));
//#line 28
  __cil_tmp5 = *__cil_tmp4;
//#line 28
  store_concrete_value_int((long )__cil_tmp5);
  {
//#line 28
  cover_condition_fun(3, __cil_tmp5 - 4, 13);
//#line 28
  if (__cil_tmp5 == 4) {
//#line 28
    load_to_heap_int((unsigned long )(& __cil_tmp5), (long )__cil_tmp5, 11);
//#line 28
    load_to_heap_int(0UL, 4, 11);
//#line 28
    apply_op(1, 13);
//#line 28
    branch(28, 3, 1, 0);
    {
//#line 30
    cover_condition_fun(4, x - 2, 13);
//#line 30
    if (x == 2) {
//#line 30
      load_to_heap_int((unsigned long )(& x), (long )x, 11);
//#line 30
      load_to_heap_int(0UL, 2, 11);
//#line 30
      apply_op(1, 13);
//#line 30
      branch(30, 4, 1, 0);
//#line 32
      load_to_heap_int(0UL, 0, 11);
//#line 32
      store_to_var_table((unsigned long )(& i));
//#line 32
      i = 0;
//#line 32
      store_concrete_value_int((long )i);
      {
//#line 32
      while (1) {
        while_continue: /* CIL Label */ ;
        {
//#line 32
        cover_condition_fun(9, i - 6, 16);
//#line 32
        if (i < 6) {
//#line 32
          load_to_heap_int((unsigned long )(& i), (long )i, 11);
//#line 32
          load_to_heap_int(0UL, 6, 11);
//#line 32
          apply_op(1, 16);
//#line 32
          branch(32, 9, 1, 0);
        } else {
//#line 32
          load_to_heap_int((unsigned long )(& i), (long )i, 11);
//#line 32
          load_to_heap_int(0UL, 6, 11);
//#line 32
          apply_op(1, 16);
//#line 32
          branch(32, 9, 0, 0);
//#line 32
          goto while_break;
        }
        }
        {
//#line 33
        load_to_heap_int((unsigned long )(& arr), (long )arr, 14);
//#line 33
        load_to_heap_int((unsigned long )(& i), (long )i, 11);
//#line 33
        apply_op(2, 25);
//#line 33
        store_to_var_table((unsigned long )(& __cil_tmp6));
//#line 33
        __cil_tmp6 = arr + i;
//#line 33
        store_concrete_value_int((long )__cil_tmp6);
//#line 33
        load_to_heap_int((unsigned long )(& __cil_tmp6), (long )((int *)__cil_tmp6),
                         11);
//#line 33
        apply_op(2, 28);
//#line 33
        store_to_var_table((unsigned long )(& __cil_tmp7));
//#line 33
        __cil_tmp7 = *((int *)__cil_tmp6);
//#line 33
        store_concrete_value_int((long )__cil_tmp7);
        {
//#line 33
        cover_condition_fun(13, __cil_tmp7 - 3, 13);
//#line 33
        if (__cil_tmp7 == 3) {
//#line 33
          load_to_heap_int((unsigned long )(& __cil_tmp7), (long )__cil_tmp7, 11);
//#line 33
          load_to_heap_int(0UL, 3, 11);
//#line 33
          apply_op(1, 13);
//#line 33
          branch(33, 13, 1, 0);
//#line 34
          load_to_heap_int((unsigned long )(& x), (long )x, 11);
//#line 34
          load_to_heap_int(0UL, 1, 11);
//#line 34
          apply_op(2, 21);
//#line 34
          store_to_var_table((unsigned long )(& x));
//#line 34
          x ++;
//#line 34
          store_concrete_value_int((long )x);
        } else {
//#line 33
          load_to_heap_int((unsigned long )(& __cil_tmp7), (long )__cil_tmp7, 11);
//#line 33
          load_to_heap_int(0UL, 3, 11);
//#line 33
          apply_op(1, 13);
//#line 33
          branch(33, 13, 0, 0);
        }
        }
        }
//#line 32
        load_to_heap_int((unsigned long )(& i), (long )i, 11);
//#line 32
        load_to_heap_int(0UL, 1, 11);
//#line 32
        apply_op(2, 21);
//#line 32
        store_to_var_table((unsigned long )(& i));
//#line 32
        i ++;
//#line 32
        store_concrete_value_int((long )i);
      }
      while_break: /* CIL Label */ ;
      }
      {
//#line 35
      cover_condition_fun(17, x - 6, 13);
//#line 35
      if (x == 6) {
//#line 35
        load_to_heap_int((unsigned long )(& x), (long )x, 11);
//#line 35
        load_to_heap_int(0UL, 6, 11);
//#line 35
        apply_op(1, 13);
//#line 35
        branch(35, 17, 1, 0);
        {
//#line 36
        load_to_heap_int(0UL, 1, 11);
//#line 36
        return (1);
        }
      } else {
//#line 35
        load_to_heap_int((unsigned long )(& x), (long )x, 11);
//#line 35
        load_to_heap_int(0UL, 6, 11);
//#line 35
        apply_op(1, 13);
//#line 35
        branch(35, 17, 0, 0);
      }
      }
    } else {
//#line 30
      load_to_heap_int((unsigned long )(& x), (long )x, 11);
//#line 30
      load_to_heap_int(0UL, 2, 11);
//#line 30
      apply_op(1, 13);
//#line 30
      branch(30, 4, 0, 0);
    }
    }
  } else {
//#line 28
    load_to_heap_int((unsigned long )(& __cil_tmp5), (long )__cil_tmp5, 11);
//#line 28
    load_to_heap_int(0UL, 4, 11);
//#line 28
    apply_op(1, 13);
//#line 28
    branch(28, 3, 0, 0);
  }
  }
  }
  {
//#line 40
  load_to_heap_int(0UL, 0, 11);
//#line 40
  return (0);
  }
}
}
//#line 44 "fit.c"
void testme(void) 
{ 
  int x ;
  int arr[6] ;
  unsigned long __cil_tmp3 ;
  unsigned long __cil_tmp4 ;
  unsigned long __cil_tmp5 ;
  int *__cil_tmp6 ;
  int __cil_tmp7 ;
  unsigned int __cil_tmp8 ;
  unsigned int __cil_tmp9 ;
  int *__cil_tmp10 ;
  int *__cil_tmp11 ;

  {
  set_main_function_id(1);
  {
//#line 50
  load_to_heap_int((unsigned long )(& x), (long )x, 11);
//#line 50
  apply_op(2, 27);
//#line 50
  store_to_var_table((unsigned long )(& __cil_tmp3));
//#line 50
  __cil_tmp3 = (unsigned long )(& x);
//#line 50
  store_concrete_value_int((long )__cil_tmp3);
//#line 50
  _cf__getInput(__cil_tmp3);
//#line 51
  load_to_heap_int((unsigned long )(& arr), (long )arr, 0);
//#line 51
  apply_op(2, 27);
//#line 51
  store_to_var_table((unsigned long )(& __cil_tmp4));
//#line 51
  __cil_tmp4 = (unsigned long )(& arr);
//#line 51
  store_concrete_value_int((long )__cil_tmp4);
//#line 51
  _cf__getInput(__cil_tmp4);
//#line 52
  load_to_heap_int((unsigned long )(& global_int), (long )global_int, 11);
//#line 52
  apply_op(2, 27);
//#line 52
  store_to_var_table((unsigned long )(& __cil_tmp5));
//#line 52
  __cil_tmp5 = (unsigned long )(& global_int);
//#line 52
  store_concrete_value_int((long )__cil_tmp5);
//#line 52
  _cf__getInput(__cil_tmp5);
//#line 57
  load_to_heap_int((unsigned long )(& x), (long )x, 11);
//#line 57
  apply_op(2, 27);
//#line 57
  store_to_var_table((unsigned long )(& __cil_tmp6));
//#line 57
  __cil_tmp6 = & x;
//#line 57
  store_concrete_value_int((long )__cil_tmp6);
//#line 57
  load_to_heap_int((unsigned long )(& __cil_tmp6), (long )__cil_tmp6, 11);
//#line 57
  apply_op(2, 28);
//#line 57
  store_to_var_table((unsigned long )(& __cil_tmp7));
//#line 57
  __cil_tmp7 = *__cil_tmp6;
//#line 57
  store_concrete_value_int((long )__cil_tmp7);
//#line 57
  load_to_heap_int(0UL, 0, 11);
//#line 57
  load_to_heap_int(0UL, 4U, 17);
//#line 57
  apply_op(2, 23);
//#line 57
  store_to_var_table((unsigned long )(& __cil_tmp8));
//#line 57
  __cil_tmp8 = 0 * 4U;
//#line 57
  store_concrete_value_int((long )__cil_tmp8);
//#line 57
  load_to_heap_int((unsigned long )(arr), (long )arr, 14);
//#line 57
  load_to_heap_int((unsigned long )(& __cil_tmp8), (long )__cil_tmp8, 17);
//#line 57
  apply_op(2, 21);
//#line 57
  store_to_var_table((unsigned long )(& __cil_tmp9));
//#line 57
  __cil_tmp9 = (unsigned int )(arr) + __cil_tmp8;
//#line 57
  store_concrete_value_int((long )__cil_tmp9);
//#line 57
  load_to_heap_int((unsigned long )(& __cil_tmp9), (long )__cil_tmp9, 17);
//#line 57
  store_to_var_table((unsigned long )(& __cil_tmp10));
//#line 57
  __cil_tmp10 = (int *)__cil_tmp9;
//#line 57
  store_concrete_value_int((long )__cil_tmp10);
//#line 57
  load_to_heap_int((unsigned long )(& __cil_tmp10), (long )__cil_tmp10, 14);
//#line 57
  store_to_var_table((unsigned long )(& __cil_tmp11));
//#line 57
  __cil_tmp11 = (int *)__cil_tmp10;
//#line 57
  store_concrete_value_int((long )__cil_tmp11);
//#line 57
  argu_push((unsigned long )(& __cil_tmp7), 11);
//#line 57
  argu_push((unsigned long )(& __cil_tmp11), 14);
//#line 57
  para_num_stack_push(2);
//#line 57
  testloop(__cil_tmp7, __cil_tmp11);
  }
//#line 58
  return;
}
}
void get_test_case_array_int(unsigned long, int);
void get_test_case_array_int(unsigned long addr, int index)
{
	int i;
	array_declaration(addr, index, 11, sizeof(int));
	for(i = 0; i < index; i++)
	{
		get_test_case_int((unsigned long)addr);
		addr += sizeof(int);
	}
}

void _cf__getInput(unsigned long addr)
{
	int id = get_input_id();
	switch(id)
	{
	case 0:
		get_test_case_int((unsigned long)addr);
		break;
	case 1:
		get_test_case_array_int(addr, 6);
		break;
	case 2:
		get_test_case_int((unsigned long)addr);
		break;
	}
}
void main(int argc, char *argv[])
{
	init_caut(argc,argv);
	init_coverage_driven_testing_framework();
	while(1){
		init_caut_exec();
		testme();
		solve_caut_exec();
	}
}
