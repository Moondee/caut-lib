#include"../caut.h"
/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is true */

//#line 4 "fang-test.c"
struct charA {
   char charD[100] ;
   unsigned int charL ;
};
//#line 4 "fang-test.c"
typedef struct charA myStr;
//#line 7 "../caut.h"
extern void _cf__getInput(unsigned long addr ) ;
//#line 10 "fang-test.c"
char *x(char *p , unsigned int n , myStr *pD ) 
{ 
  char *r ;
  char *__cil_tmp5 ;
  unsigned int __cil_tmp6 ;
  unsigned int __cil_tmp7 ;
  myStr *__cil_tmp8 ;
  unsigned int __cil_tmp9 ;
  unsigned int __cil_tmp10 ;
  unsigned int __cil_tmp11 ;
  unsigned int __cil_tmp12 ;
  unsigned int __cil_tmp13 ;
  unsigned int __cil_tmp14 ;
  unsigned int __cil_tmp15 ;
  unsigned int __cil_tmp16 ;
  unsigned int __cil_tmp17 ;
  unsigned int __cil_tmp18 ;

  {
  set_main_function_id(0);
  para_pop((unsigned long )(& p));
  para_pop((unsigned long )(& n));
  para_pop((unsigned long )(& pD));
  {
//#line 12
  load_to_heap_int(0UL, 0, 11);
//#line 12
  store_to_var_table((unsigned long )(& __cil_tmp5));
//#line 12
  __cil_tmp5 = (char *)0;
//#line 12
  store_concrete_value_int((long )__cil_tmp5);
//#line 12
  load_to_heap_int((unsigned long )(& __cil_tmp5), (long )__cil_tmp5, 14);
//#line 12
  store_to_var_table((unsigned long )(& __cil_tmp6));
//#line 12
  __cil_tmp6 = (unsigned int )__cil_tmp5;
//#line 12
  store_concrete_value_int((long )__cil_tmp6);
//#line 12
  load_to_heap_int((unsigned long )(& p), (long )p, 14);
//#line 12
  store_to_var_table((unsigned long )(& __cil_tmp7));
//#line 12
  __cil_tmp7 = (unsigned int )p;
//#line 12
  store_concrete_value_int((long )__cil_tmp7);
  {
//#line 12
  cover_condition_fun(3, __cil_tmp7 - __cil_tmp6, 13);
//#line 12
  if (__cil_tmp7 == __cil_tmp6) {
//#line 12
    load_to_heap_int((unsigned long )(& __cil_tmp7), (long )__cil_tmp7, 17);
//#line 12
    load_to_heap_int((unsigned long )(& __cil_tmp6), (long )__cil_tmp6, 17);
//#line 12
    apply_op(1, 13);
//#line 12
    branch(12, 3, 1, 0);
    {
//#line 13
    load_to_heap_int(0UL, 0, 11);
//#line 13
    return ((char *)0);
    }
  } else {
//#line 12
    load_to_heap_int((unsigned long )(& __cil_tmp7), (long )__cil_tmp7, 17);
//#line 12
    load_to_heap_int((unsigned long )(& __cil_tmp6), (long )__cil_tmp6, 17);
//#line 12
    apply_op(1, 13);
//#line 12
    branch(12, 3, 0, 0);
    {
//#line 12
    load_to_heap_int(0UL, 0, 11);
//#line 12
    store_to_var_table((unsigned long )(& __cil_tmp8));
//#line 12
    __cil_tmp8 = (myStr *)0;
//#line 12
    store_concrete_value_int((long )__cil_tmp8);
//#line 12
    load_to_heap_int((unsigned long )(& __cil_tmp8), (long )__cil_tmp8, 14);
//#line 12
    store_to_var_table((unsigned long )(& __cil_tmp9));
//#line 12
    __cil_tmp9 = (unsigned int )__cil_tmp8;
//#line 12
    store_concrete_value_int((long )__cil_tmp9);
//#line 12
    load_to_heap_int((unsigned long )(& pD), (long )pD, 14);
//#line 12
    store_to_var_table((unsigned long )(& __cil_tmp10));
//#line 12
    __cil_tmp10 = (unsigned int )pD;
//#line 12
    store_concrete_value_int((long )__cil_tmp10);
    {
//#line 12
    cover_condition_fun(7, __cil_tmp10 - __cil_tmp9, 13);
//#line 12
    if (__cil_tmp10 == __cil_tmp9) {
//#line 12
      load_to_heap_int((unsigned long )(& __cil_tmp10), (long )__cil_tmp10, 17);
//#line 12
      load_to_heap_int((unsigned long )(& __cil_tmp9), (long )__cil_tmp9, 17);
//#line 12
      apply_op(1, 13);
//#line 12
      branch(12, 7, 1, 0);
      {
//#line 13
      load_to_heap_int(0UL, 0, 11);
//#line 13
      return ((char *)0);
      }
    } else {
//#line 12
      load_to_heap_int((unsigned long )(& __cil_tmp10), (long )__cil_tmp10, 17);
//#line 12
      load_to_heap_int((unsigned long )(& __cil_tmp9), (long )__cil_tmp9, 17);
//#line 12
      apply_op(1, 13);
//#line 12
      branch(12, 7, 0, 0);
    }
    }
    }
  }
  }
  }
//#line 14
  load_to_heap_int(0UL, 0, 11);
//#line 14
  load_to_heap_int(0UL, 1U, 17);
//#line 14
  apply_op(2, 23);
//#line 14
  store_to_var_table((unsigned long )(& __cil_tmp11));
//#line 14
  __cil_tmp11 = 0 * 1U;
//#line 14
  store_concrete_value_int((long )__cil_tmp11);
//#line 14
  load_to_heap_int(0UL, 0, 11);
//#line 14
  load_to_heap_int((unsigned long )(& __cil_tmp11), (long )__cil_tmp11, 17);
//#line 14
  apply_op(2, 21);
//#line 14
  store_to_var_table((unsigned long )(& __cil_tmp12));
//#line 14
  __cil_tmp12 = 0 + __cil_tmp11;
//#line 14
  store_concrete_value_int((long )__cil_tmp12);
//#line 14
  load_to_heap_int((unsigned long )(& pD), (long )pD, 14);
//#line 14
  store_to_var_table((unsigned long )(& __cil_tmp13));
//#line 14
  __cil_tmp13 = (unsigned int )pD;
//#line 14
  store_concrete_value_int((long )__cil_tmp13);
//#line 14
  load_to_heap_int((unsigned long )(& __cil_tmp13), (long )__cil_tmp13, 17);
//#line 14
  load_to_heap_int((unsigned long )(& __cil_tmp12), (long )__cil_tmp12, 17);
//#line 14
  apply_op(2, 21);
//#line 14
  store_to_var_table((unsigned long )(& __cil_tmp14));
//#line 14
  __cil_tmp14 = __cil_tmp13 + __cil_tmp12;
//#line 14
  store_concrete_value_int((long )__cil_tmp14);
//#line 14
  load_to_heap_int((unsigned long )(& __cil_tmp14), (long )__cil_tmp14, 17);
//#line 14
  store_to_var_table((unsigned long )(& r));
//#line 14
  r = (char *)__cil_tmp14;
//#line 14
  store_concrete_value_int((long )r);
  {
//#line 15
  cover_condition_fun(10, n - 100U, 15);
//#line 15
  if (n <= 100U) {
//#line 15
    load_to_heap_int((unsigned long )(& n), (long )n, 17);
//#line 15
    load_to_heap_int(0UL, 100U, 17);
//#line 15
    apply_op(1, 15);
//#line 15
    branch(15, 10, 1, 0);
//#line 16
    load_to_heap_int((unsigned long )(& pD), (long )pD, 14);
//#line 16
    store_to_var_table((unsigned long )(& __cil_tmp15));
//#line 16
    __cil_tmp15 = (unsigned int )pD;
//#line 16
    store_concrete_value_int((long )__cil_tmp15);
//#line 16
    load_to_heap_int((unsigned long )(& __cil_tmp15), (long )__cil_tmp15, 17);
//#line 16
    load_to_heap_int(0UL, 100, 11);
//#line 16
    apply_op(2, 21);
//#line 16
    store_to_var_table((unsigned long )(& __cil_tmp16));
//#line 16
    __cil_tmp16 = __cil_tmp15 + 100;
//#line 16
    store_concrete_value_int((long )__cil_tmp16);
//#line 16
    load_to_heap_int((unsigned long )(& n), (long )n, 17);
//#line 16
    store_to_var_table((unsigned long )((unsigned int *)__cil_tmp16));
//#line 16
    *((unsigned int *)__cil_tmp16) = n;
//#line 16
    store_concrete_value_int((long )*((unsigned int *)__cil_tmp16));
  } else {
//#line 15
    load_to_heap_int((unsigned long )(& n), (long )n, 17);
//#line 15
    load_to_heap_int(0UL, 100U, 17);
//#line 15
    apply_op(1, 15);
//#line 15
    branch(15, 10, 0, 0);
//#line 18
    load_to_heap_int((unsigned long )(& pD), (long )pD, 14);
//#line 18
    store_to_var_table((unsigned long )(& __cil_tmp17));
//#line 18
    __cil_tmp17 = (unsigned int )pD;
//#line 18
    store_concrete_value_int((long )__cil_tmp17);
//#line 18
    load_to_heap_int((unsigned long )(& __cil_tmp17), (long )__cil_tmp17, 17);
//#line 18
    load_to_heap_int(0UL, 100, 11);
//#line 18
    apply_op(2, 21);
//#line 18
    store_to_var_table((unsigned long )(& __cil_tmp18));
//#line 18
    __cil_tmp18 = __cil_tmp17 + 100;
//#line 18
    store_concrete_value_int((long )__cil_tmp18);
//#line 18
    load_to_heap_int(0UL, 0U, 17);
//#line 18
    store_to_var_table((unsigned long )((unsigned int *)__cil_tmp18));
//#line 18
    *((unsigned int *)__cil_tmp18) = 0U;
//#line 18
    store_concrete_value_int((long )*((unsigned int *)__cil_tmp18));
  }
  }
  {
//#line 20
  load_to_heap_int((unsigned long )(& r), (long )r, 14);
//#line 20
  return (r);
  }
}
}
//#line 23 "fang-test.c"
void testme(void) 
{ 
  char *p =0;
  unsigned int n ;
  myStr *pD =0;
  unsigned long __cil_tmp4 ;
  unsigned long __cil_tmp5 ;
  unsigned long __cil_tmp6 ;
  char **__cil_tmp7 ;
  char *__cil_tmp8 ;
  unsigned int *__cil_tmp9 ;
  unsigned int __cil_tmp10 ;
  myStr **__cil_tmp11 ;
  myStr *__cil_tmp12 ;

  {
  set_main_function_id(1);
  {
//#line 28
  load_to_heap_int((unsigned long )(& p), (long )p, 14);
//#line 28
  apply_op(2, 27);
//#line 28
  store_to_var_table((unsigned long )(& __cil_tmp4));
//#line 28
  __cil_tmp4 = (unsigned long )(& p);
//#line 28
  store_concrete_value_int((long )__cil_tmp4);
//#line 28
  _cf__getInput(__cil_tmp4);
//#line 29
  load_to_heap_int((unsigned long )(& n), (long )n, 17);
//#line 29
  apply_op(2, 27);
//#line 29
  store_to_var_table((unsigned long )(& __cil_tmp5));
//#line 29
  __cil_tmp5 = (unsigned long )(& n);
//#line 29
  store_concrete_value_int((long )__cil_tmp5);
//#line 29
  _cf__getInput(__cil_tmp5);
//#line 30
  load_to_heap_int((unsigned long )(& pD), (long )pD, 14);
//#line 30
  apply_op(2, 27);
//#line 30
  store_to_var_table((unsigned long )(& __cil_tmp6));
//#line 30
  __cil_tmp6 = (unsigned long )(& pD);
//#line 30
  store_concrete_value_int((long )__cil_tmp6);
//#line 30
  _cf__getInput(__cil_tmp6);
//#line 31
  load_to_heap_int((unsigned long )(& p), (long )p, 14);
//#line 31
  apply_op(2, 27);
//#line 31
  store_to_var_table((unsigned long )(& __cil_tmp7));
//#line 31
  __cil_tmp7 = & p;
//#line 31
  store_concrete_value_int((long )__cil_tmp7);
//#line 31
  load_to_heap_int((unsigned long )(& __cil_tmp7), (long )__cil_tmp7, 14);
//#line 31
  apply_op(2, 28);
//#line 31
  store_to_var_table((unsigned long )(& __cil_tmp8));
//#line 31
  __cil_tmp8 = *__cil_tmp7;
//#line 31
  store_concrete_value_int((long )__cil_tmp8);
//#line 31
  load_to_heap_int((unsigned long )(& n), (long )n, 17);
//#line 31
  apply_op(2, 27);
//#line 31
  store_to_var_table((unsigned long )(& __cil_tmp9));
//#line 31
  __cil_tmp9 = & n;
//#line 31
  store_concrete_value_int((long )__cil_tmp9);
//#line 31
  load_to_heap_int((unsigned long )(& __cil_tmp9), (long )__cil_tmp9, 17);
//#line 31
  apply_op(2, 28);
//#line 31
  store_to_var_table((unsigned long )(& __cil_tmp10));
//#line 31
  __cil_tmp10 = *__cil_tmp9;
//#line 31
  store_concrete_value_int((long )__cil_tmp10);
//#line 31
  load_to_heap_int((unsigned long )(& pD), (long )pD, 14);
//#line 31
  apply_op(2, 27);
//#line 31
  store_to_var_table((unsigned long )(& __cil_tmp11));
//#line 31
  __cil_tmp11 = & pD;
//#line 31
  store_concrete_value_int((long )__cil_tmp11);
//#line 31
  load_to_heap_int((unsigned long )(& __cil_tmp11), (long )__cil_tmp11, 14);
//#line 31
  apply_op(2, 28);
//#line 31
  store_to_var_table((unsigned long )(& __cil_tmp12));
//#line 31
  __cil_tmp12 = *__cil_tmp11;
//#line 31
  store_concrete_value_int((long )__cil_tmp12);
//#line 31
  argu_push((unsigned long )(& __cil_tmp8), 14);
//#line 31
  argu_push((unsigned long )(& __cil_tmp10), 17);
//#line 31
  argu_push((unsigned long )(& __cil_tmp12), 14);
//#line 31
  para_num_stack_push(3);
//#line 31
  x(__cil_tmp8, __cil_tmp10, __cil_tmp12);
  }
//#line 32
  return;
}
}
//#line 23 "fang-test.c"
void __CAUT_register_types(void) 
{ 
  __CAUT_ctype_t __CAUT_t ;
  int __CAUT_reg_ret ;
  int __cil_tmp3[1] ;
  int __cil_tmp4[1] ;
  int __cil_tmp5[3] ;

  {
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("void", 4, sizeof(void ), 0);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(0, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("char", 4, sizeof(char ), 1);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(1, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("signed char", 11, sizeof(signed char ),
                                          2);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(2, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("short", 5, sizeof(short ), 3);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(3, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("int", 3, sizeof(int ), 4);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(4, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("long", 4, sizeof(long ), 5);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(5, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("long long", 9, sizeof(long long ), 6);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(6, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("unsigned char", 13, sizeof(unsigned char ),
                                          7);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(7, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("unsigned short", 14, sizeof(unsigned short ),
                                          8);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(8, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("unsigned int", 12, sizeof(unsigned int ),
                                          9);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(9, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("unsigned long", 13, sizeof(unsigned long ),
                                          10);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(10, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("unsigned long long", 18, sizeof(unsigned long long ),
                                          11);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(11, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("float", 5, sizeof(float ), 12);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(12, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("double", 6, sizeof(double ), 13);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(13, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_primitive_type("long double", 11, sizeof(long double ),
                                          14);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(14, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_comp_type_struct("charA", 5, sizeof(struct charA ), 2);
//#line 23
  __CAUT_t = __CAUT_create_comp_member(__CAUT_t, "charD", 5, 21, -1, 0);
//#line 23
  __CAUT_t = __CAUT_create_comp_member(__CAUT_t, "charL", 5, 9, -1, 1);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(20, __CAUT_t);
//#line 23
  __cil_tmp3[0] = 100;
//#line 23
  __CAUT_t = __CAUT_create_array_type("char[100]", 9, 1, 1, __cil_tmp3);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(21, __CAUT_t);
//#line 23
  __cil_tmp4[0] = 10;
//#line 23
  __CAUT_t = __CAUT_create_func_type("r_void_a_unsigned long_", 23, 1, __cil_tmp4,
                                     0);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(22, __CAUT_t);
//#line 23
  __cil_tmp5[0] = 24;
//#line 23
  __cil_tmp5[1] = 9;
//#line 23
  __cil_tmp5[2] = 25;
//#line 23
  __CAUT_t = __CAUT_create_func_type("r_char*_a_char*_unsigned int_charA*_", 36, 3,
                                     __cil_tmp5, 24);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(23, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_pointer_type("char*", 5, 1);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(24, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_pointer_type("charA*", 6, 20);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(25, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_pointer_type("unsigned int*", 13, 9);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(26, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_func_type("r_void_a_", 9, 0, 0, 0);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(27, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_pointer_type("char**", 6, 24);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(28, __CAUT_t);
//#line 23
  __CAUT_t = __CAUT_create_pointer_type("charA**", 7, 25);
//#line 23
  __CAUT_reg_ret = __CAUT_register_datatype(29, __CAUT_t);
//#line 23
  return;
}
}
void get_test_case_ptr_myStr_of_level_1(unsigned long);
void get_test_case_ptr_char_of_level_1(unsigned long);
void get_test_case_struct_charA(unsigned long);
void get_test_case_array_char(unsigned long, int);
void get_test_case_ptr_myStr_of_level_1(unsigned long addr_old)
{
	long addr = abstract_ptr_handle(addr_old, sizeof(myStr));
	if(addr > 0)
	{
		get_test_case_struct_charA((unsigned long)addr);
	}
}
void get_test_case_ptr_char_of_level_1(unsigned long addr_old)
{
	long addr = abstract_ptr_handle(addr_old, sizeof(char));
	if(addr > 0)
	{
		get_test_case_char((unsigned long)addr);
	}
}
void get_test_case_struct_charA(unsigned long address)
{
	struct charA* tmp;
	unsigned long addr;
	tmp = (struct charA*) address;
	addr = (unsigned long)&(tmp->charD);
	get_test_case_array_char(addr, 100);
	addr = (unsigned long)&(tmp->charL);
	get_test_case_int((unsigned long)addr);

}
void get_test_case_array_char(unsigned long addr, int index)
{
	int i;
	array_declaration(addr, index, 15, sizeof(char));
	for(i = 0; i < index; i++)
	{
		get_test_case_char((unsigned long)addr);
		addr += sizeof(char);
	}
}

void _cf__getInput(unsigned long addr)
{
	int id = get_input_id();
	switch(id)
	{
	case 0:
		get_test_case_ptr_char_of_level_1((unsigned long)addr);
		break;
	case 1:
		get_test_case_int((unsigned long)addr);
		break;
	case 2:
		get_test_case_ptr_myStr_of_level_1((unsigned long)addr);
		break;
	}
}
void main(int argc, char *argv[])
{
	init_caut(argc,argv);
	init_coverage_driven_testing_framework();
	while(1){
		init_caut_exec();
		testme();
		solve_caut_exec();
	}
}
