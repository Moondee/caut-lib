#include "caut.h"
//#include "stdafx.h"
//#include <math.h>

/* 基本数据类型重定义 */
typedef unsigned char boolean;
typedef signed char		siint08;
typedef unsigned char   unint08;
typedef signed short	siint16;
typedef unsigned short  unint16;
typedef signed int		siint32;
typedef unsigned int    unint32;
typedef float           float32;
typedef double          float64;
typedef void (*FunPtr)(void);

#define FALSE   0
#define TRUE    1
#define FLOAT_ZERO 1.0e-7f

#define JUDGE_STS(x) ( (STSUseable & (x)) == (x) )

/* 矩阵/矢量数据类型定义 */
typedef struct TAG_THREE_DIM_VECTOR_FLOAT32
{
	float32 f3[3];
} S3FVector;

typedef struct TAG_THREE_DIM_VECTOR_FLOAT64
{
	float64 d3[3];
} S3DVector;

typedef struct TAG_FOUR_DIM_VECTOR_FLOAT32
{
	float32 f4[4];
} S4FVector;

typedef struct TAG_SIX_DIM_VECTOR_FLOAT32
{
	float32 f6[6];
} S6FVector;

typedef struct TAG_FOUR_DIM_VECTOR_FLOAT64
{
	float64 d4[4];
} S4DVector;

typedef struct TAG_QUATERNION_FLOAT32
{
	float64 q4[4];
} SQuater;

typedef struct TAG_THREE_THREE_MATRIX_FLOAT32
{
	float32 f33[3][3];
} S33Matrix;

typedef struct TAG_THREE_THREE_MATRIX_FLOAT64
{
	float64 d33[3][3];
} S33DMatrix;

typedef struct TAG_FOUR_THREE_MATRIX_FLOAT32
{
	float32 f43[4][3];
} S43Matrix;

typedef struct TAG_FOUR_FOUR_MATRIX_FLOAT32
{
	float32 f44[4][4];
} S44Matrix;

typedef struct TAG_FOUR_FOUR_MATRIX_FLOAT64
{
	float64 d44[4][4];
} S44DMatrix;

typedef struct TAG_ATTITUDE
{
	float32 angle[3];                    
	float32 angle_last[3];               
	float32 rate[3];
	float32 angle_b[3];
	float32 rate_b[3];
	float32 rate_bpre[3];
	float32 dangle[3];
	
	S3DVector angle_dv;
	S3FVector rate_dv;
	
	S33Matrix Cbo;
	
	SQuater   q;
	SQuater   qt; 
	SQuater   deltaq;
	
	float32   angleAB[3];
	float32   angleAC[3];
	float32   angleBA[3]; 
	float32   angleBC[3];
} SAttitude;

typedef struct TAG_FALSE_RATE_MODULATOR
{
	float32 fy;
	float32 FilterOutput;

	unint32 Thrp;
	unint32 Thrm;
	unint32 bTpwp;
	unint32 bTpwm;
} SFalseRateModulator;

typedef struct TAG_FILTER_PARAM
{
	float32 A1;
	float32 A2;
	float32 H1;
	float32 H2;
	float32 D;

	unint32 type;
} SFilterParam;

typedef struct TAG_CONTROLLER_PARAM
{
	float32         Kp;
	float32         Ki;
	float32         Kd;

	SFilterParam    param[4];

	unint32         bIntegerOn;
	float32         he;
	float32         ha;
} SControllerParam;

typedef struct TAG_FILTER
{
	float32 u;
	float32 x[2];
	float32 y;
} SFilter;

typedef struct TAG_CONTROLLER
{
	float32 Up;
	float32 Ud;
	float32 fy;
	float32 xIntegral;
	float32 Tcm;

	SFilter filter[5];
} SController;

typedef struct TAG_STS_INJECT
{
	boolean   bPrecession;
	boolean   bAberration;

	unint32   flgCalibrate;
	unint32   flgCalibrateLFE;
	S3FVector ki;

	float32   epsilonMax;

	SQuater   qtc;

	float32   ms;
	float32   ms1;

	float32   aZAB;
	float32   aZAC;
	float32   aZBC;
	float32   aXAB;
	float32   aXAC;
	float32   aXBC;

	float32   mST;
	float32   mdST;
	float32   wmax[3];
} SSTSInject;

typedef struct TAG_STPM
{
	unint32 bSSFaultFlag;
	boolean bStA[2];
	boolean bStB[2];
	boolean bStC[2];
	S3FVector ZA[2];
	S3FVector ZB[2];
	S3FVector ZC[2];
	S3FVector XA[2];
	S3FVector XB[2];
	S3FVector XC[2];
} SSTPM;

typedef struct TAG_STS_THREE_AXES_DATA
{
	S3FVector axes[3];
} SSTS3AxesData;

typedef struct TAG_STS_DATA
{
    float64 time;
  
    SQuater qm;
    SQuater qm_old;
    boolean bUsable;

    SSTS3AxesData Imeasure;
    SSTS3AxesData Imeasure_delta;

    S3FVector       phi_delta;
    SSTS3AxesData   installVector0;
    SSTS3AxesData   installVector1;
    S4FVector       mout;
} SSTSData;

const float64 PI             = 3.141592653589793;
const float32 PI32           = 3.141592653589793f;
const float64 DOUBLE_PI      = 6.283185307179586;
const float64 HALF_PI        = 1.570796326794897;
const float64 TRI_HALF_PI    = 4.712388980384690;
const float64 DEG2RAD        = 0.01745329251994330;
const float64 RAD2DEG        = 57.29577951308232;

unint32 flgMode;
unint32 flgSubMode;
unint32 STSUseable;

unint32 countPublic;
unint32 countTime;
unint32 countSubMode;

SAttitude mAttitude;
SController mController[3];
SFalseRateModulator mModulator[3];
SControllerParam mCtrlParam[3];
SSTPM mSTPM;
SSTSData mSTSData[3];
SSTS3AxesData cSTSIVec0[3];
SSTS3AxesData cSTSIVec1[3];

SSTSInject mSTSInject =
{
	FALSE, 
	TRUE,

	1,
	0,

	{{0.1f, 0.01f, 0.02f}},

	0.1f,  

	{{0.0f, 0.0f, 0.0f, 1.0f}},

	1.0f,
	1.0f,

	0.3f,
	0.4f,
	0.5f,

	0.1f,
	0.2f,
	0.3f,

	1.0f,
	1.0f,

	{0.1f, 0.1f, 0.2f},
};

#define SAM                     0
#define EAM                     1
#define EPM                     2
#define STPM					3
#define AFM                     4
#define SKM                     5
#define NM                      6
#define ESM                     7

#define SAM_DAMP                0 
#define SAM_PITCH               1
#define SAM_ROLL                2
#define SAM_CRUISE              3

#define STPM_SSP                0
#define STPM_ESP                1
#define STPM_ISP                2

#define MAX(a, b)                       (((a) > (b)) ? (a) : (b))
#define MIN(a, b)                       (((a) > (b)) ? (b) : (a))
#define ABS(a)                          (((a) > 0) ? (a) : -(a))
#define SGN(a)                          (((a) < 0) ? (-1) : (1))


float32 VectorDot3F(const S3FVector *vax, const S3FVector *vby)
{
	return (vax->f3[0] * vby->f3[0] +
		vax->f3[1] * vby->f3[1] +
		vax->f3[2] * vby->f3[2]);
}

void VectorCross3F(S3FVector *vout3, const S3FVector *vx1, const S3FVector *vy2)
{
	vout3->f3[0] = vx1->f3[1] * vy2->f3[2] - vx1->f3[2] * vy2->f3[1];
	vout3->f3[1] = vx1->f3[2] * vy2->f3[0] - vx1->f3[0] * vy2->f3[2];
	vout3->f3[2] = vx1->f3[0] * vy2->f3[1] - vx1->f3[1] * vy2->f3[0];

	return;
}

float32 VectorNorm3F(const S3FVector *pF3)
{
	return (float32)(sqrt(pF3->f3[0] * pF3->f3[0] +
		pF3->f3[1] * pF3->f3[1] +
		pF3->f3[2] * pF3->f3[2]));
}

void VectorCrossNormalize3F(S3FVector *vout3,
	const S3FVector *vx1, const S3FVector *vy2)
{
	float32 crsf3[3];
	float32 croot;

	crsf3[0] = vx1->f3[1] * vy2->f3[2] - vx1->f3[2] * vy2->f3[1];
	crsf3[1] = vx1->f3[2] * vy2->f3[0] - vx1->f3[0] * vy2->f3[2];
	crsf3[2] = vx1->f3[0] * vy2->f3[1] - vx1->f3[1] * vy2->f3[0];

	croot = (float32)(sqrt(crsf3[0] * crsf3[0] +
		crsf3[1] * crsf3[1] +
		crsf3[2] * crsf3[2]));

	if (croot > FLOAT_ZERO)
	{
		vout3->f3[0] = crsf3[0] / croot;
		vout3->f3[1] = crsf3[1] / croot;
		vout3->f3[2] = crsf3[2] / croot;
	}
	else
	{
		vout3->f3[0] = 0.0f;
		vout3->f3[1] = 0.0f;
		vout3->f3[2] = 0.0f;
	}

	return;
}


void MatrixMulti(float32 *product,
	const float32 *faciend,
	const float32 *multiplier,
	siint32 nrow, siint32 nrc, siint32 ncol)
{
	siint32 ir;
	siint32 jc;
	siint32 nk;
	siint32 index;

	for (ir=0; ir<nrow; ir++)
	{
		for (jc=0; jc<ncol; jc++)
		{
			index = ir * ncol + jc;

			product[index] = 0.0f;

			for (nk=0; nk<nrc; nk++)
			{
				product[index] = product[index] +
					faciend[ir * nrc + nk] * multiplier[nk * ncol + jc];
			}
		}
	}

	return;
}

void A2Q(SQuater *pOutQ, const S33Matrix *pACMatrix)
{
	float32 a44;
	float32 b22;
	float32 c11;
	float32 d33;
	float32 tqi;
	siint32 isgn;
	SQuater tmpQ;
	float32 qnorm;

	a44 = 1.0f + pACMatrix->f33[0][0] + pACMatrix->f33[1][1] + pACMatrix->f33[2][2];
	b22 = 1.0f - pACMatrix->f33[0][0] + pACMatrix->f33[1][1] - pACMatrix->f33[2][2];
	c11 = 1.0f + pACMatrix->f33[0][0] - pACMatrix->f33[1][1] - pACMatrix->f33[2][2];

	if (a44 >= 0.004f)
	{
		tqi = (float32)(sqrt(a44) / 2.0f);

		tmpQ.q4[0] = 0.25f * (pACMatrix->f33[1][2] - pACMatrix->f33[2][1]) / tqi;
		tmpQ.q4[1] = 0.25f * (pACMatrix->f33[2][0] - pACMatrix->f33[0][2]) / tqi;
		tmpQ.q4[2] = 0.25f * (pACMatrix->f33[0][1] - pACMatrix->f33[1][0]) / tqi;
		tmpQ.q4[3] = tqi;
	}
	else if (b22 >= 0.004f)
	{
		isgn = SGN(pACMatrix->f33[2][0] - pACMatrix->f33[0][2]);
		tqi = (float32)(sqrt(b22) / 2.0f) * isgn;

		tmpQ.q4[0] = 0.25f * (pACMatrix->f33[1][0] + pACMatrix->f33[0][1]) / tqi;
		tmpQ.q4[1] = tqi;
		tmpQ.q4[2] = 0.25f * (pACMatrix->f33[2][1] + pACMatrix->f33[1][2]) / tqi;
		tmpQ.q4[3] = 0.25f * (pACMatrix->f33[2][0] - pACMatrix->f33[0][2]) / tqi;
	}
	else if (c11 >= 0.004f)
	{
		isgn = SGN(pACMatrix->f33[1][2] - pACMatrix->f33[2][1]);
		tqi = (float32)(sqrt(c11) / 2.0f) * isgn;

		tmpQ.q4[0] = tqi;
		tmpQ.q4[1] = 0.25f * (pACMatrix->f33[1][0] + pACMatrix->f33[0][1]) / tqi;
		tmpQ.q4[2] = 0.25f * (pACMatrix->f33[0][2] + pACMatrix->f33[2][0]) / tqi;
		tmpQ.q4[3] = 0.25f * (pACMatrix->f33[1][2] - pACMatrix->f33[2][1]) / tqi;
	}
	else
	{
		d33 = 1.0f - pACMatrix->f33[0][0] - pACMatrix->f33[1][1] + pACMatrix->f33[2][2];

		isgn = SGN(pACMatrix->f33[0][1] - pACMatrix->f33[1][0]);
		tqi = (float32)(sqrt(d33) / 2.0f) * isgn;

		tmpQ.q4[0] = 0.25f * (pACMatrix->f33[0][2] + pACMatrix->f33[2][0]) / tqi;
		tmpQ.q4[1] = 0.25f * (pACMatrix->f33[1][2] + pACMatrix->f33[2][1]) / tqi;
		tmpQ.q4[2] = tqi;
		tmpQ.q4[3] = 0.25f * (pACMatrix->f33[0][1] - pACMatrix->f33[1][0]) / tqi;
	}

	qnorm = (float32)(sqrt(tmpQ.q4[0] * tmpQ.q4[0] + tmpQ.q4[1] * tmpQ.q4[1] + tmpQ.q4[2] * tmpQ.q4[2] + tmpQ.q4[3] * tmpQ.q4[3]));

	if (qnorm > FLOAT_ZERO)
	{
		if (tmpQ.q4[3] < 0.0f)
		{
			qnorm = -qnorm;
		}

		pOutQ->q4[0] = tmpQ.q4[0] / qnorm;
		pOutQ->q4[1] = tmpQ.q4[1] / qnorm;
		pOutQ->q4[2] = tmpQ.q4[2] / qnorm;
		pOutQ->q4[3] = tmpQ.q4[3] / qnorm;
	}
	else
	{
		pOutQ->q4[0] = 0.0f;
		pOutQ->q4[1] = 0.0f;
		pOutQ->q4[2] = 0.0f;
		pOutQ->q4[3] = 1.0f;
	}

	return;
}

float64 ModPNPI(float64 x)
{
	float64 value;

	value = x - floor(x / DOUBLE_PI) * DOUBLE_PI;

	if (value > PI)
	{
		value = value - DOUBLE_PI;
	}
	else if (value <= -PI)
	{
		value = value + 2 * DOUBLE_PI;
	}
	
	return value;
}

boolean GetSt_Store(siint32 i)
{
	boolean res;
	if (i == 0)
	{
		res = mSTPM.bStA[0];
	}
	else if (i == 1)
	{
		res = mSTPM.bStB[0];
	}
	else if (i == 2)
	{
		res = mSTPM.bStC[0];
	}
	else if (i == 3)
	{
		res = mSTPM.bStA[1];
	}
	else if (i == 4)
	{
		res = mSTPM.bStB[1];
	}
	else
	{
		res = mSTPM.bStC[1];
	}

	return res;
}

S3FVector *GetX_StStore(siint32 i)
{
	S3FVector *res;
	if (i == 0)
	{
		res = &mSTPM.XA[0];
	}
	else if (i == 1)
	{
		res = &mSTPM.XB[0];
	}
	else if (i == 2)
	{
		res = &mSTPM.XC[0];
	}
	else if (i == 3)
	{
		res = &mSTPM.XA[1];
	}
	else if (i == 4)
	{
		res = &mSTPM.XB[1];
	}
	else
	{
		res = &mSTPM.XC[1];
	}

	return res;
}

S3FVector *GetZ_StStore(siint32 i)
{
	S3FVector *res;
	if (i == 0)
	{
		res = &mSTPM.ZA[0];
	}
	else if (i == 1)
	{
		res = &mSTPM.ZB[0];
	}
	else if (i == 2)
	{
		res = &mSTPM.ZC[0];
	}
	else if (i == 3)
	{
		res = &mSTPM.ZA[1];
	}
	else if (i == 4)
	{
		res = &mSTPM.ZB[1];
	}
	else
	{
		res = &mSTPM.ZC[1];
	}

	return res;
}

void STPM_GetImeasure(void)
{
	/* 根据星敏感器全天球捕获能力设置12.8s */
	//if ((countPublic >= 0) && (countPublic < 200))
	if (countPublic < 200)
	{
		if (JUDGE_STS(0x1))  /* 星敏A数据有效 */
		{
			mSTPM.bStA[0] = TRUE;

			mSTPM.ZA[0] = mSTSData[0].Imeasure.axes[2];   /* 获得该组星敏A光轴数据 */
			mSTPM.XA[0] = mSTSData[0].Imeasure.axes[0];   /* 获得该组星敏A横轴数据 */
		}

		if (JUDGE_STS(0x2))  /* 星敏B数据有效 */
		{
			mSTPM.bStB[0] = TRUE;

			mSTPM.ZB[0] = mSTSData[1].Imeasure.axes[2];   /* 获得该组星敏B光轴数据 */
			mSTPM.XB[0] = mSTSData[1].Imeasure.axes[0];   /* 获得该组星敏B横轴数据 */
		}

		if (JUDGE_STS(0x4))  /* 星敏C数据有效 */
		{
			mSTPM.bStC[0] = TRUE;

			mSTPM.ZC[0] = mSTSData[2].Imeasure.axes[2];   /* 获得该组星敏C光轴数据 */
			mSTPM.XC[0] = mSTSData[2].Imeasure.axes[0];   /* 获得该组星敏C横轴数据 */
		}
	}
	else if (countPublic < 250)
	{
		if (JUDGE_STS(0x1))  /* 星敏A数据有效 */
		{
			mSTPM.bStA[1] = TRUE;

			mSTPM.ZA[1] = mSTSData[0].Imeasure.axes[2];   /* 获得该组星敏A光轴数据 */
			mSTPM.XA[1] = mSTSData[0].Imeasure.axes[0];   /* 获得该组星敏A横轴数据 */
		}

		if (JUDGE_STS(0x2))  /* 星敏B数据有效 */
		{
			mSTPM.bStB[1] = TRUE;

			mSTPM.ZB[1] = mSTSData[1].Imeasure.axes[2];   /* 获得该组星敏B光轴数据 */
			mSTPM.XB[1] = mSTSData[1].Imeasure.axes[0];   /* 获得该组星敏B横轴数据 */
		}

		if (JUDGE_STS(0x4))  /* 星敏C数据有效 */
		{
			mSTPM.bStC[1] = TRUE;

			mSTPM.ZC[1] = mSTSData[2].Imeasure.axes[2];   /* 获得该组星敏C光轴数据 */
			mSTPM.XC[1] = mSTSData[2].Imeasure.axes[0];   /* 获得该组星敏C横轴数据 */
		}
	}
	
	return;
}

void STPM_DataClear(void)
{
	if (countPublic >= 250)
	{
		countPublic = 0;
		mSTPM.bSSFaultFlag = 3;
		mSTPM.bStA[0] = FALSE;
		mSTPM.bStA[1] = FALSE;
		mSTPM.bStB[0] = FALSE;
		mSTPM.bStB[1] = FALSE;
		mSTPM.bStC[0] = FALSE;
		mSTPM.bStC[1] = FALSE;
		mSTPM.ZA[0].f3[0] = 0.0f;
		mSTPM.ZA[0].f3[1] = 0.0f;
		mSTPM.ZA[0].f3[2] = 0.0f;
		mSTPM.ZA[1].f3[0] = 0.0f;
		mSTPM.ZA[1].f3[1] = 0.0f;
		mSTPM.ZA[1].f3[2] = 0.0f;
		mSTPM.ZB[0].f3[0] = 0.0f;
		mSTPM.ZB[0].f3[1] = 0.0f;
		mSTPM.ZB[0].f3[2] = 0.0f;
		mSTPM.ZB[1].f3[0] = 0.0f;
		mSTPM.ZB[1].f3[1] = 0.0f;
		mSTPM.ZB[1].f3[2] = 0.0f;
		mSTPM.ZC[0].f3[0] = 0.0f;
		mSTPM.ZC[0].f3[1] = 0.0f;
		mSTPM.ZC[0].f3[2] = 0.0f;
		mSTPM.ZC[1].f3[0] = 0.0f;
		mSTPM.ZC[1].f3[1] = 0.0f;
		mSTPM.ZC[1].f3[2] = 0.0f;
		mSTPM.XA[0].f3[0] = 0.0f;
		mSTPM.XA[0].f3[1] = 0.0f;
		mSTPM.XA[0].f3[2] = 0.0f;
		mSTPM.XA[1].f3[0] = 0.0f;
		mSTPM.XA[1].f3[1] = 0.0f;
		mSTPM.XA[1].f3[2] = 0.0f;
		mSTPM.XB[0].f3[0] = 0.0f;
		mSTPM.XB[0].f3[1] = 0.0f;
		mSTPM.XB[0].f3[2] = 0.0f;
		mSTPM.XB[1].f3[0] = 0.0f;
		mSTPM.XB[1].f3[1] = 0.0f;
		mSTPM.XB[1].f3[2] = 0.0f;
		mSTPM.XC[0].f3[0] = 0.0f;
		mSTPM.XC[0].f3[1] = 0.0f;
		mSTPM.XC[0].f3[2] = 0.0f;
		mSTPM.XC[1].f3[0] = 0.0f;
		mSTPM.XC[1].f3[1] = 0.0f;
		mSTPM.XC[1].f3[2] = 0.0f;
	}

	return;
}

void DoubleVectorSTSOne(SQuater *pQ, S33Matrix * opCBI, 
	S3FVector *pZi, S3FVector *pXi, const SSTS3AxesData *pVec)
{
	S3FVector tmpCI;

	S33Matrix tmpB;
	S33Matrix tmpI;

	VectorCross3F(&tmpCI, pZi, pXi);

	tmpI.f33[0][0] = pZi->f3[0];
	tmpI.f33[0][1] = pZi->f3[1];
	tmpI.f33[0][2] = pZi->f3[2];

	tmpI.f33[1][0] = pXi->f3[0];
	tmpI.f33[1][1] = pXi->f3[1];
	tmpI.f33[1][2] = pXi->f3[2];

	tmpI.f33[2][0] = tmpCI.f3[0];
	tmpI.f33[2][1] = tmpCI.f3[1];
	tmpI.f33[2][2] = tmpCI.f3[2];

	tmpB.f33[0][0] = pVec->axes[2].f3[0];
	tmpB.f33[1][0] = pVec->axes[2].f3[1];
	tmpB.f33[2][0] = pVec->axes[2].f3[2];

	tmpB.f33[0][1] = pVec->axes[0].f3[0];
	tmpB.f33[1][1] = pVec->axes[0].f3[1];
	tmpB.f33[2][1] = pVec->axes[0].f3[2];

	tmpB.f33[0][2] = pVec->axes[1].f3[0];
	tmpB.f33[1][2] = pVec->axes[1].f3[1];
	tmpB.f33[2][2] = pVec->axes[1].f3[2];

	MatrixMulti(&opCBI->f33[0][0], &tmpB.f33[0][0], &tmpI.f33[0][0], 3, 3, 3);

	A2Q(pQ, opCBI);

	return;
}

void DoubleVectorSTSTwo(SQuater *pQ, S33Matrix * opCBI,
	const S3FVector *pZiA1, const S3FVector *pZiB2,
	const S3FVector *pVecA1, const S3FVector *pVecB2)
{
	S3FVector tmpBI;
	S3FVector tmpCI;
	S3FVector tmpBb;
	S3FVector tmpCb;

	S33Matrix tmpB;
	S33Matrix tmpI;

	VectorCrossNormalize3F(&tmpBI, pZiA1, pZiB2);

	VectorCross3F(&tmpCI, pZiA1, &tmpBI);

	VectorCrossNormalize3F(&tmpBb, pVecA1, pVecB2);

	VectorCross3F(&tmpCb, pVecA1, &tmpBb);

	tmpI.f33[0][0] = pZiA1->f3[0];
	tmpI.f33[0][1] = pZiA1->f3[1];
	tmpI.f33[0][2] = pZiA1->f3[2];

	tmpI.f33[1][0] = tmpBI.f3[0];
	tmpI.f33[1][1] = tmpBI.f3[1];
	tmpI.f33[1][2] = tmpBI.f3[2];

	tmpI.f33[2][0] = tmpCI.f3[0];
	tmpI.f33[2][1] = tmpCI.f3[1];
	tmpI.f33[2][2] = tmpCI.f3[2];

	tmpB.f33[0][0] = pVecA1->f3[0];
	tmpB.f33[1][0] = pVecA1->f3[1];
	tmpB.f33[2][0] = pVecA1->f3[2];

	tmpB.f33[0][1] = tmpBb.f3[0];
	tmpB.f33[1][1] = tmpBb.f3[1];
	tmpB.f33[2][1] = tmpBb.f3[2];

	tmpB.f33[0][2] = tmpCb.f3[0];
	tmpB.f33[1][2] = tmpCb.f3[1];
	tmpB.f33[2][2] = tmpCb.f3[2];

	MatrixMulti(&opCBI->f33[0][0], &tmpB.f33[0][0], &tmpI.f33[0][0], 3, 3, 3);

	A2Q(pQ, opCBI);

	return;
}


boolean STPM_CheckDataUsable(siint32 *p_i, boolean *p_iZ, siint32 *p_j, boolean *p_jZ)
{
	siint32 i;
	siint32 j;
	boolean F_CaptOK;
	siint32 m;
	siint32 n;
	S3FVector vec;
	S3FVector *pv1;
	S3FVector *pv2;
	float32 norm;
	float32 prod;
	float32 delta;
	unint32 dataUseable;

	F_CaptOK = FALSE;
	dataUseable = 0x0;

	//add by tester
	if(p_i == 0 || p_iZ==0 || p_j==0 || p_jZ==0 )
		return 0;

	for(i = 5; (i > 0) && (F_CaptOK != TRUE); i--)
	{
		if (GetSt_Store(i) == TRUE)
		{
			for(j = i - 1; (j >= 0) && (F_CaptOK != TRUE); j--)
			{
				if (GetSt_Store(j) == TRUE)
				{
					m = i % 3;
					n = j % 3;
					pv1 = GetZ_StStore(i);
					pv2 = GetZ_StStore(j);
					if (m == n)
					{
						VectorCross3F(&vec, pv1, pv2);
						norm = VectorNorm3F(&vec);
						if (norm < 0.14)
						{
							F_CaptOK = TRUE;
							*p_i = i;
							*p_iZ = TRUE;
							*p_j = i;
							*p_jZ = FALSE;
							dataUseable = dataUseable | (0x1 << m);
						}
					}
					else
					{
						prod = VectorDot3F(pv1, pv2);
						if (ABS(m - n) == 2)
						{
							//delta = prod - mSTSInject.aZAC;
							delta = prod - 0.3f;
						}
						else if  ((m == 0) || (n == 0))
						{
							//delta = prod - mSTSInject.aZAB;
							delta = prod - 0.4f;
						}
						else
						{
							//delta = prod - mSTSInject.aZBC;
							delta = prod - 0.5f;
						}
						delta = ABS(delta);

						if (delta < 0.06)
						{
							if (m == 0)
							{
								dataUseable = dataUseable | 0x1;
							}
							else if (m == 1)
							{
								dataUseable = dataUseable | 0x2;
							}
							else 
							{
								dataUseable = dataUseable | 0x4;
							}
							*p_i = i;
							*p_iZ = TRUE;

							if (n == 0)
							{
								dataUseable = dataUseable | 0x1;
							}
							else if (n == 1)
							{
								dataUseable = dataUseable | 0x2;
							}
							else
							{
								dataUseable = dataUseable | 0x4;
							}

							*p_j = j;
							*p_jZ = TRUE;
						}

					}
				}
			}
		}
	}

	if (dataUseable != STSUseable)
	{
		STSUseable = dataUseable;
	}

	return F_CaptOK;
}
/*
void testme(){

	siint32 *p_i;
	boolean *p_iZ;
	siint32 *p_j;
	boolean *p_jZ;

	CAUT_INPUT(p_i);
	CAUT_INPUT(p_iZ);
	CAUT_INPUT(p_j);
	CAUT_INPUT(p_jZ);

	CAUT_INPUT(STSUseable);

	
	STPM_CheckDataUsable(p_i, p_iZ, p_j, p_jZ);
}
*/

void STPM_D(void)
{
	S33Matrix tmpCBI;	
	boolean F_CaptOK;
	siint32 i;
	siint32 j;
	boolean iZ;
	boolean jZ;
	S3FVector *pv1;
	S3FVector *pv2;

	countPublic = countPublic + 1;
	STPM_GetImeasure();
	F_CaptOK = STPM_CheckDataUsable(&i, &iZ, &j, &jZ);

	if (F_CaptOK == TRUE)
	{
		if (iZ == TRUE)
		{
			pv1 = GetZ_StStore(i);
		}
		else
		{
			pv1 = GetX_StStore(i);
		}

		if (jZ == TRUE)
		{
			pv2 = GetZ_StStore(j);
		}
		else
		{
			pv2 = GetX_StStore(j);
		}

		i = i % 3;
		j = j % 3;

		if (i == j)
		{
			DoubleVectorSTSOne(&mAttitude.q, &tmpCBI, pv1, pv2, &cSTSIVec0[i]);
		}
		else if (i < j)
		{
			DoubleVectorSTSTwo(&mAttitude.q, &tmpCBI, pv1, pv2, &cSTSIVec0[i].axes[2], &cSTSIVec0[j].axes[2]);
		}
		else
		{
			DoubleVectorSTSTwo(&mAttitude.q, &tmpCBI, pv2, pv1, &cSTSIVec0[j].axes[2], &cSTSIVec0[i].axes[2]);
		}

		if (flgSubMode == STPM_ISP)
		{
			mAttitude.qt = mAttitude.q;
		}
		mSTPM.bSSFaultFlag = 0;
		countPublic = 0;
		countSubMode = 0;
	}
	else
	{
		STPM_DataClear();
	}

	return;
}

void ControllerLimit(void)			//10.3.1.1
{
	unint32 i;
	float32 tmpUp[3];
	float32 fabsUp[3];
	float32 limtp[3];
	float32 limtd[3];
	float32 tmpD[3];
	float32 tmpUd[3];
	float32 fabsUd[3];

	for (i=0; i<3; i++)
	{
		tmpUp[i] = mAttitude.angle[i] - mAttitude.angle_b[i];  /* 角度计算 */
		tmpUp[i] = (float32)ModPNPI(tmpUp[i]);   /* (-PI,PI]取主值 */
		fabsUp[i] = ABS(tmpUp[i]);   /* 取绝对值 */

		/* 选择角速度 */
		if ((flgMode == SKM) || (flgMode == NM))   /* 位保模式和正常模式 */
		{
			tmpD[i] = mAttitude.dangle[i];         /* 使用姿态角速率 */
		}
		else
		{
			tmpD[i] = mAttitude.rate[i];           /* 使用姿态角速度 */
		}
		tmpUd[i] = tmpD[i] - mAttitude.rate_b[i];  /* 角速度计算 */
		fabsUd[i] = ABS(tmpUd[i]);   /* 取绝对值 */

		/* 角度限幅, chensl, 20130304 */
		if ((flgMode == SKM) || (flgMode == NM))
		{
			limtp[i] = 0.0087f;
		}
		else
		{
			if ((flgMode == EPM) && (i == 0))
			{
				limtp[i] = 0.04363f;
			}
			else
			{
				limtp[i] = 0.08727f;
			}
		}

		/* 角速度限幅 */
		limtd[i] = 0.01745f;

		/* 计算控制量 */
		if (fabsUp[i] < limtp[i])
		{
			mController[i].Up = tmpUp[i];
		}
		else if (tmpUp[i] >= limtp[i])
		{
			mController[i].Up = limtp[i];
		}
		else
		{
			mController[i].Up = -limtp[i];
		}

		if (fabsUd[i] < limtd[i])
		{
			mController[i].Ud = tmpUd[i];
		}
		else if (tmpUd[i] >= limtd[i])
		{
			mController[i].Ud = limtd[i];
		}
		else
		{
			mController[i].Ud = -limtd[i];
		}
	}

	return;
}


void testme(){


	CAUT_INPUT(p_i);
	CAUT_INPUT(p_iZ);
	CAUT_INPUT(p_j);
	CAUT_INPUT(p_jZ);

	CAUT_INPUT(STSUseable);

	
	STPM_CheckDataUsable(p_i, p_iZ, p_j, p_jZ);
}

