#include"../caut.h"
/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is true */

//#line 3 "executecondnode.c"
struct word_desc {
   char word[3] ;
   int flags ;
};
//#line 3 "executecondnode.c"
typedef struct word_desc WORD_DESC;
//#line 36 "executecondnode.c"
struct cond_com {
   int flags ;
   int line ;
   int type ;
   WORD_DESC *op ;
   struct cond_com *left ;
   struct cond_com *right ;
};
//#line 36 "executecondnode.c"
typedef struct cond_com COND_COM;
//#line 6 "../caut.h"
extern void _cf__getInput(unsigned long addr ) ;
//#line 44 "executecondnode.c"
static int execute_cond_node(COND_COM *cond , int echo_command_at_execute , int t ,
                             int t1 , int t2 , int t3 , int t4 , int t5 , int t6 ,
                             int t7 , int t8 , int t9 , int t10 ) 
{ 
  int result ;
  int invert ;
  char *arg1 ;
  char *arg2 ;
  int nullstr ;
  int dg ;
  COND_COM *__cil_tmp23 ;
  unsigned int __cil_tmp24 ;
  unsigned int __cil_tmp25 ;
  int __cil_tmp26 ;
  unsigned int __cil_tmp27 ;
  unsigned int __cil_tmp28 ;
  int __cil_tmp29 ;
  unsigned int __cil_tmp30 ;
  unsigned int __cil_tmp31 ;
  int __cil_tmp32 ;
  unsigned int __cil_tmp33 ;
  unsigned int __cil_tmp34 ;
  int __cil_tmp35 ;
  unsigned int __cil_tmp36 ;
  unsigned int __cil_tmp37 ;
  int __cil_tmp38 ;
  char *__cil_tmp39 ;
  unsigned int __cil_tmp40 ;
  unsigned int __cil_tmp41 ;
  unsigned int __cil_tmp42 ;
  unsigned int __cil_tmp43 ;
  unsigned int __cil_tmp44 ;
  unsigned int __cil_tmp45 ;
  int __cil_tmp46 ;
  WORD_DESC *__cil_tmp47 ;
  unsigned int __cil_tmp48 ;
  unsigned int __cil_tmp49 ;
  unsigned int __cil_tmp50 ;
  WORD_DESC *__cil_tmp51 ;
  unsigned int __cil_tmp52 ;
  char *__cil_tmp53 ;
  unsigned int __cil_tmp54 ;
  unsigned int __cil_tmp55 ;
  char *__cil_tmp56 ;
  unsigned int __cil_tmp57 ;
  unsigned int __cil_tmp58 ;
  unsigned int __cil_tmp59 ;
  unsigned int __cil_tmp60 ;
  unsigned int __cil_tmp61 ;
  unsigned int __cil_tmp62 ;

  {
  set_main_function_id(0);
  para_pop((unsigned long )(& cond));
  para_pop((unsigned long )(& echo_command_at_execute));
  para_pop((unsigned long )(& t));
  para_pop((unsigned long )(& t1));
  para_pop((unsigned long )(& t2));
  para_pop((unsigned long )(& t3));
  para_pop((unsigned long )(& t4));
  para_pop((unsigned long )(& t5));
  para_pop((unsigned long )(& t6));
  para_pop((unsigned long )(& t7));
  para_pop((unsigned long )(& t8));
  para_pop((unsigned long )(& t9));
  para_pop((unsigned long )(& t10));
//#line 49
  load_to_heap_int(0UL, 0, 11);
//#line 49
  store_to_var_table((unsigned long )(& nullstr));
//#line 49
  nullstr = 0;
//#line 49
  store_concrete_value_int((long )nullstr);
//#line 50
  load_to_heap_int(0UL, 0, 11);
//#line 50
  store_to_var_table((unsigned long )(& dg));
//#line 50
  dg = 0;
//#line 50
  store_concrete_value_int((long )dg);
  {
//#line 52
  load_to_heap_int(0UL, 0, 11);
//#line 52
  store_to_var_table((unsigned long )(& __cil_tmp23));
//#line 52
  __cil_tmp23 = (COND_COM *)0;
//#line 52
  store_concrete_value_int((long )__cil_tmp23);
//#line 52
  load_to_heap_int((unsigned long )(& __cil_tmp23), (long )__cil_tmp23, 14);
//#line 52
  store_to_var_table((unsigned long )(& __cil_tmp24));
//#line 52
  __cil_tmp24 = (unsigned int )__cil_tmp23;
//#line 52
  store_concrete_value_int((long )__cil_tmp24);
//#line 52
  load_to_heap_int((unsigned long )(& cond), (long )cond, 14);
//#line 52
  store_to_var_table((unsigned long )(& __cil_tmp25));
//#line 52
  __cil_tmp25 = (unsigned int )cond;
//#line 52
  store_concrete_value_int((long )__cil_tmp25);
  {
//#line 52
  cover_condition_fun(4, __cil_tmp25 - __cil_tmp24, 13);
//#line 52
  if (__cil_tmp25 == __cil_tmp24) {
//#line 52
    load_to_heap_int((unsigned long )(& __cil_tmp25), (long )__cil_tmp25, 17);
//#line 52
    load_to_heap_int((unsigned long )(& __cil_tmp24), (long )__cil_tmp24, 17);
//#line 52
    apply_op(1, 13);
//#line 52
    branch(52, 4, 1, 0);
    {
//#line 52
    load_to_heap_int(0UL, 0, 11);
//#line 52
    return (0);
    }
  } else {
//#line 52
    load_to_heap_int((unsigned long )(& __cil_tmp25), (long )__cil_tmp25, 17);
//#line 52
    load_to_heap_int((unsigned long )(& __cil_tmp24), (long )__cil_tmp24, 17);
//#line 52
    apply_op(1, 13);
//#line 52
    branch(52, 4, 0, 0);
  }
  }
  }
//#line 53
  load_to_heap_int((unsigned long )(& cond), (long )((int *)cond), 11);
//#line 53
  apply_op(2, 28);
//#line 53
  store_to_var_table((unsigned long )(& __cil_tmp26));
//#line 53
  __cil_tmp26 = *((int *)cond);
//#line 53
  store_concrete_value_int((long )__cil_tmp26);
//#line 53
  load_to_heap_int((unsigned long )(& __cil_tmp26), (long )__cil_tmp26, 11);
//#line 53
  load_to_heap_int(0UL, 4, 11);
//#line 53
  apply_op(2, -1);
//#line 53
  store_to_var_table((unsigned long )(& invert));
//#line 53
  invert = __cil_tmp26 & 4;
//#line 53
  store_concrete_value_int((long )invert);
  {
//#line 55
  load_to_heap_int((unsigned long )(& cond), (long )cond, 14);
//#line 55
  store_to_var_table((unsigned long )(& __cil_tmp27));
//#line 55
  __cil_tmp27 = (unsigned int )cond;
//#line 55
  store_concrete_value_int((long )__cil_tmp27);
//#line 55
  load_to_heap_int((unsigned long )(& __cil_tmp27), (long )__cil_tmp27, 17);
//#line 55
  load_to_heap_int(0UL, 8, 11);
//#line 55
  apply_op(2, 21);
//#line 55
  store_to_var_table((unsigned long )(& __cil_tmp28));
//#line 55
  __cil_tmp28 = __cil_tmp27 + 8;
//#line 55
  store_concrete_value_int((long )__cil_tmp28);
//#line 55
  load_to_heap_int((unsigned long )(& __cil_tmp28), (long )((int *)__cil_tmp28), 11);
//#line 55
  apply_op(2, 28);
//#line 55
  store_to_var_table((unsigned long )(& __cil_tmp29));
//#line 55
  __cil_tmp29 = *((int *)__cil_tmp28);
//#line 55
  store_concrete_value_int((long )__cil_tmp29);
  {
//#line 55
  cover_condition_fun(9, __cil_tmp29 - 6, 13);
//#line 55
  if (__cil_tmp29 == 6) {
//#line 55
    load_to_heap_int((unsigned long )(& __cil_tmp29), (long )__cil_tmp29, 11);
//#line 55
    load_to_heap_int(0UL, 6, 11);
//#line 55
    apply_op(1, 13);
//#line 55
    branch(55, 9, 1, 0);
//#line 56
    load_to_heap_int((unsigned long )(& t3), (long )t3, 11);
//#line 56
    store_to_var_table((unsigned long )(& result));
//#line 56
    result = t3;
//#line 56
    store_concrete_value_int((long )result);
  } else {
//#line 55
    load_to_heap_int((unsigned long )(& __cil_tmp29), (long )__cil_tmp29, 11);
//#line 55
    load_to_heap_int(0UL, 6, 11);
//#line 55
    apply_op(1, 13);
//#line 55
    branch(55, 9, 0, 0);
    {
//#line 58
    load_to_heap_int((unsigned long )(& cond), (long )cond, 14);
//#line 58
    store_to_var_table((unsigned long )(& __cil_tmp30));
//#line 58
    __cil_tmp30 = (unsigned int )cond;
//#line 58
    store_concrete_value_int((long )__cil_tmp30);
//#line 58
    load_to_heap_int((unsigned long )(& __cil_tmp30), (long )__cil_tmp30, 17);
//#line 58
    load_to_heap_int(0UL, 8, 11);
//#line 58
    apply_op(2, 21);
//#line 58
    store_to_var_table((unsigned long )(& __cil_tmp31));
//#line 58
    __cil_tmp31 = __cil_tmp30 + 8;
//#line 58
    store_concrete_value_int((long )__cil_tmp31);
//#line 58
    load_to_heap_int((unsigned long )(& __cil_tmp31), (long )((int *)__cil_tmp31),
                     11);
//#line 58
    apply_op(2, 28);
//#line 58
    store_to_var_table((unsigned long )(& __cil_tmp32));
//#line 58
    __cil_tmp32 = *((int *)__cil_tmp31);
//#line 58
    store_concrete_value_int((long )__cil_tmp32);
    {
//#line 58
    cover_condition_fun(13, __cil_tmp32 - 2, 13);
//#line 58
    if (__cil_tmp32 == 2) {
//#line 58
      load_to_heap_int((unsigned long )(& __cil_tmp32), (long )__cil_tmp32, 11);
//#line 58
      load_to_heap_int(0UL, 2, 11);
//#line 58
      apply_op(1, 13);
//#line 58
      branch(58, 13, 1, 0);
//#line 61
      load_to_heap_int((unsigned long )(& t4), (long )t4, 11);
//#line 61
      store_to_var_table((unsigned long )(& result));
//#line 61
      result = t4;
//#line 61
      store_concrete_value_int((long )result);
      {
//#line 62
      cover_condition_fun(15, result - 0, 14);
//#line 62
      if (result != 0) {
//#line 62
        load_to_heap_int((unsigned long )(& result), (long )result, 11);
//#line 62
        load_to_heap_int(0UL, 0, 11);
//#line 62
        apply_op(1, 14);
//#line 62
        branch(62, 15, 1, 0);
//#line 63
        load_to_heap_int((unsigned long )(& t5), (long )t5, 11);
//#line 63
        store_to_var_table((unsigned long )(& result));
//#line 63
        result = t5;
//#line 63
        store_concrete_value_int((long )result);
      } else {
//#line 62
        load_to_heap_int((unsigned long )(& result), (long )result, 11);
//#line 62
        load_to_heap_int(0UL, 0, 11);
//#line 62
        apply_op(1, 14);
//#line 62
        branch(62, 15, 0, 0);
      }
      }
    } else {
//#line 58
      load_to_heap_int((unsigned long )(& __cil_tmp32), (long )__cil_tmp32, 11);
//#line 58
      load_to_heap_int(0UL, 2, 11);
//#line 58
      apply_op(1, 13);
//#line 58
      branch(58, 13, 0, 0);
      {
//#line 66
      load_to_heap_int((unsigned long )(& cond), (long )cond, 14);
//#line 66
      store_to_var_table((unsigned long )(& __cil_tmp33));
//#line 66
      __cil_tmp33 = (unsigned int )cond;
//#line 66
      store_concrete_value_int((long )__cil_tmp33);
//#line 66
      load_to_heap_int((unsigned long )(& __cil_tmp33), (long )__cil_tmp33, 17);
//#line 66
      load_to_heap_int(0UL, 8, 11);
//#line 66
      apply_op(2, 21);
//#line 66
      store_to_var_table((unsigned long )(& __cil_tmp34));
//#line 66
      __cil_tmp34 = __cil_tmp33 + 8;
//#line 66
      store_concrete_value_int((long )__cil_tmp34);
//#line 66
      load_to_heap_int((unsigned long )(& __cil_tmp34), (long )((int *)__cil_tmp34),
                       11);
//#line 66
      apply_op(2, 28);
//#line 66
      store_to_var_table((unsigned long )(& __cil_tmp35));
//#line 66
      __cil_tmp35 = *((int *)__cil_tmp34);
//#line 66
      store_concrete_value_int((long )__cil_tmp35);
      {
//#line 66
      cover_condition_fun(19, __cil_tmp35 - 1, 13);
//#line 66
      if (__cil_tmp35 == 1) {
//#line 66
        load_to_heap_int((unsigned long )(& __cil_tmp35), (long )__cil_tmp35, 11);
//#line 66
        load_to_heap_int(0UL, 1, 11);
//#line 66
        apply_op(1, 13);
//#line 66
        branch(66, 19, 1, 0);
//#line 69
        load_to_heap_int((unsigned long )(& t6), (long )t6, 11);
//#line 69
        store_to_var_table((unsigned long )(& result));
//#line 69
        result = t6;
//#line 69
        store_concrete_value_int((long )result);
        {
//#line 70
        cover_condition_fun(21, result - 0, 13);
//#line 70
        if (result == 0) {
//#line 70
          load_to_heap_int((unsigned long )(& result), (long )result, 11);
//#line 70
          load_to_heap_int(0UL, 0, 11);
//#line 70
          apply_op(1, 13);
//#line 70
          branch(70, 21, 1, 0);
//#line 71
          load_to_heap_int((unsigned long )(& t7), (long )t7, 11);
//#line 71
          store_to_var_table((unsigned long )(& result));
//#line 71
          result = t7;
//#line 71
          store_concrete_value_int((long )result);
        } else {
//#line 70
          load_to_heap_int((unsigned long )(& result), (long )result, 11);
//#line 70
          load_to_heap_int(0UL, 0, 11);
//#line 70
          apply_op(1, 13);
//#line 70
          branch(70, 21, 0, 0);
        }
        }
      } else {
//#line 66
        load_to_heap_int((unsigned long )(& __cil_tmp35), (long )__cil_tmp35, 11);
//#line 66
        load_to_heap_int(0UL, 1, 11);
//#line 66
        apply_op(1, 13);
//#line 66
        branch(66, 19, 0, 0);
        {
//#line 74
        load_to_heap_int((unsigned long )(& cond), (long )cond, 14);
//#line 74
        store_to_var_table((unsigned long )(& __cil_tmp36));
//#line 74
        __cil_tmp36 = (unsigned int )cond;
//#line 74
        store_concrete_value_int((long )__cil_tmp36);
//#line 74
        load_to_heap_int((unsigned long )(& __cil_tmp36), (long )__cil_tmp36, 17);
//#line 74
        load_to_heap_int(0UL, 8, 11);
//#line 74
        apply_op(2, 21);
//#line 74
        store_to_var_table((unsigned long )(& __cil_tmp37));
//#line 74
        __cil_tmp37 = __cil_tmp36 + 8;
//#line 74
        store_concrete_value_int((long )__cil_tmp37);
//#line 74
        load_to_heap_int((unsigned long )(& __cil_tmp37), (long )((int *)__cil_tmp37),
                         11);
//#line 74
        apply_op(2, 28);
//#line 74
        store_to_var_table((unsigned long )(& __cil_tmp38));
//#line 74
        __cil_tmp38 = *((int *)__cil_tmp37);
//#line 74
        store_concrete_value_int((long )__cil_tmp38);
        {
//#line 74
        cover_condition_fun(25, __cil_tmp38 - 3, 13);
//#line 74
        if (__cil_tmp38 == 3) {
//#line 74
          load_to_heap_int((unsigned long )(& __cil_tmp38), (long )__cil_tmp38, 11);
//#line 74
          load_to_heap_int(0UL, 3, 11);
//#line 74
          apply_op(1, 13);
//#line 74
          branch(74, 25, 1, 0);
//#line 77
          load_to_heap_int((unsigned long )(& t), (long )t, 11);
//#line 77
          store_to_var_table((unsigned long )(& arg1));
//#line 77
          arg1 = (char *)t;
//#line 77
          store_concrete_value_int((long )arg1);
          {
//#line 78
          load_to_heap_int(0UL, 0, 11);
//#line 78
          store_to_var_table((unsigned long )(& __cil_tmp39));
//#line 78
          __cil_tmp39 = (char *)0;
//#line 78
          store_concrete_value_int((long )__cil_tmp39);
//#line 78
          load_to_heap_int((unsigned long )(& __cil_tmp39), (long )__cil_tmp39, 14);
//#line 78
          store_to_var_table((unsigned long )(& __cil_tmp40));
//#line 78
          __cil_tmp40 = (unsigned int )__cil_tmp39;
//#line 78
          store_concrete_value_int((long )__cil_tmp40);
//#line 78
          load_to_heap_int((unsigned long )(& arg1), (long )arg1, 14);
//#line 78
          store_to_var_table((unsigned long )(& __cil_tmp41));
//#line 78
          __cil_tmp41 = (unsigned int )arg1;
//#line 78
          store_concrete_value_int((long )__cil_tmp41);
          {
//#line 78
          cover_condition_fun(29, __cil_tmp41 - __cil_tmp40, 13);
//#line 78
          if (__cil_tmp41 == __cil_tmp40) {
//#line 78
            load_to_heap_int((unsigned long )(& __cil_tmp41), (long )__cil_tmp41,
                             17);
//#line 78
            load_to_heap_int((unsigned long )(& __cil_tmp40), (long )__cil_tmp40,
                             17);
//#line 78
            apply_op(1, 13);
//#line 78
            branch(78, 29, 1, 0);
//#line 79
            load_to_heap_int((unsigned long )(& nullstr), (long )nullstr, 11);
//#line 79
            store_to_var_table((unsigned long )(& arg1));
//#line 79
            arg1 = (char *)nullstr;
//#line 79
            store_concrete_value_int((long )arg1);
          } else {
//#line 78
            load_to_heap_int((unsigned long )(& __cil_tmp41), (long )__cil_tmp41,
                             17);
//#line 78
            load_to_heap_int((unsigned long )(& __cil_tmp40), (long )__cil_tmp40,
                             17);
//#line 78
            apply_op(1, 13);
//#line 78
            branch(78, 29, 0, 0);
          }
          }
          }
          {
//#line 80
          cover_condition_fun(31, echo_command_at_execute - 0, 14);
//#line 80
          if (echo_command_at_execute != 0) {
//#line 80
            load_to_heap_int((unsigned long )(& echo_command_at_execute), (long )echo_command_at_execute,
                             11);
//#line 80
            load_to_heap_int(0UL, 0, 11);
//#line 80
            apply_op(1, 14);
//#line 80
            branch(80, 31, 1, 0);
//#line 83
            load_to_heap_int((unsigned long )(& t10), (long )t10, 11);
//#line 83
            store_to_var_table((unsigned long )(& result));
//#line 83
            result = t10;
//#line 83
            store_concrete_value_int((long )result);
          } else {
//#line 80
            load_to_heap_int((unsigned long )(& echo_command_at_execute), (long )echo_command_at_execute,
                             11);
//#line 80
            load_to_heap_int(0UL, 0, 11);
//#line 80
            apply_op(1, 14);
//#line 80
            branch(80, 31, 0, 0);
          }
          }
          {
//#line 84
          load_to_heap_int((unsigned long )(& nullstr), (long )nullstr, 11);
//#line 84
          store_to_var_table((unsigned long )(& __cil_tmp42));
//#line 84
          __cil_tmp42 = (unsigned int )nullstr;
//#line 84
          store_concrete_value_int((long )__cil_tmp42);
//#line 84
          load_to_heap_int((unsigned long )(& arg1), (long )arg1, 14);
//#line 84
          store_to_var_table((unsigned long )(& __cil_tmp43));
//#line 84
          __cil_tmp43 = (unsigned int )arg1;
//#line 84
          store_concrete_value_int((long )__cil_tmp43);
          {
//#line 84
          cover_condition_fun(35, __cil_tmp43 - __cil_tmp42, 14);
//#line 84
          if (__cil_tmp43 != __cil_tmp42) {
//#line 84
            load_to_heap_int((unsigned long )(& __cil_tmp43), (long )__cil_tmp43,
                             17);
//#line 84
            load_to_heap_int((unsigned long )(& __cil_tmp42), (long )__cil_tmp42,
                             17);
//#line 84
            apply_op(1, 14);
//#line 84
            branch(84, 35, 1, 0);
//#line 86
            load_to_heap_int((unsigned long )(& dg), (long )dg, 11);
//#line 86
            load_to_heap_int(0UL, 1, 11);
//#line 86
            apply_op(2, 21);
//#line 86
            store_to_var_table((unsigned long )(& dg));
//#line 86
            dg ++;
//#line 86
            store_concrete_value_int((long )dg);
          } else {
//#line 84
            load_to_heap_int((unsigned long )(& __cil_tmp43), (long )__cil_tmp43,
                             17);
//#line 84
            load_to_heap_int((unsigned long )(& __cil_tmp42), (long )__cil_tmp42,
                             17);
//#line 84
            apply_op(1, 14);
//#line 84
            branch(84, 35, 0, 0);
          }
          }
          }
        } else {
//#line 74
          load_to_heap_int((unsigned long )(& __cil_tmp38), (long )__cil_tmp38, 11);
//#line 74
          load_to_heap_int(0UL, 3, 11);
//#line 74
          apply_op(1, 13);
//#line 74
          branch(74, 25, 0, 0);
          {
//#line 88
          load_to_heap_int((unsigned long )(& cond), (long )cond, 14);
//#line 88
          store_to_var_table((unsigned long )(& __cil_tmp44));
//#line 88
          __cil_tmp44 = (unsigned int )cond;
//#line 88
          store_concrete_value_int((long )__cil_tmp44);
//#line 88
          load_to_heap_int((unsigned long )(& __cil_tmp44), (long )__cil_tmp44, 17);
//#line 88
          load_to_heap_int(0UL, 8, 11);
//#line 88
          apply_op(2, 21);
//#line 88
          store_to_var_table((unsigned long )(& __cil_tmp45));
//#line 88
          __cil_tmp45 = __cil_tmp44 + 8;
//#line 88
          store_concrete_value_int((long )__cil_tmp45);
//#line 88
          load_to_heap_int((unsigned long )(& __cil_tmp45), (long )((int *)__cil_tmp45),
                           11);
//#line 88
          apply_op(2, 28);
//#line 88
          store_to_var_table((unsigned long )(& __cil_tmp46));
//#line 88
          __cil_tmp46 = *((int *)__cil_tmp45);
//#line 88
          store_concrete_value_int((long )__cil_tmp46);
          {
//#line 88
          cover_condition_fun(39, __cil_tmp46 - 4, 13);
//#line 88
          if (__cil_tmp46 == 4) {
//#line 88
            load_to_heap_int((unsigned long )(& __cil_tmp46), (long )__cil_tmp46,
                             11);
//#line 88
            load_to_heap_int(0UL, 4, 11);
//#line 88
            apply_op(1, 13);
//#line 88
            branch(88, 39, 1, 0);
            {
//#line 90
            load_to_heap_int(0UL, 0, 11);
//#line 90
            store_to_var_table((unsigned long )(& __cil_tmp47));
//#line 90
            __cil_tmp47 = (WORD_DESC *)0;
//#line 90
            store_concrete_value_int((long )__cil_tmp47);
//#line 90
            load_to_heap_int((unsigned long )(& __cil_tmp47), (long )__cil_tmp47,
                             14);
//#line 90
            store_to_var_table((unsigned long )(& __cil_tmp48));
//#line 90
            __cil_tmp48 = (unsigned int )__cil_tmp47;
//#line 90
            store_concrete_value_int((long )__cil_tmp48);
//#line 90
            load_to_heap_int((unsigned long )(& cond), (long )cond, 14);
//#line 90
            store_to_var_table((unsigned long )(& __cil_tmp49));
//#line 90
            __cil_tmp49 = (unsigned int )cond;
//#line 90
            store_concrete_value_int((long )__cil_tmp49);
//#line 90
            load_to_heap_int((unsigned long )(& __cil_tmp49), (long )__cil_tmp49,
                             17);
//#line 90
            load_to_heap_int(0UL, 12, 11);
//#line 90
            apply_op(2, 21);
//#line 90
            store_to_var_table((unsigned long )(& __cil_tmp50));
//#line 90
            __cil_tmp50 = __cil_tmp49 + 12;
//#line 90
            store_concrete_value_int((long )__cil_tmp50);
//#line 90
            load_to_heap_int((unsigned long )(& __cil_tmp50), (long )((WORD_DESC **)__cil_tmp50),
                             14);
//#line 90
            apply_op(2, 28);
//#line 90
            store_to_var_table((unsigned long )(& __cil_tmp51));
//#line 90
            __cil_tmp51 = *((WORD_DESC **)__cil_tmp50);
//#line 90
            store_concrete_value_int((long )__cil_tmp51);
//#line 90
            load_to_heap_int((unsigned long )(& __cil_tmp51), (long )__cil_tmp51,
                             14);
//#line 90
            store_to_var_table((unsigned long )(& __cil_tmp52));
//#line 90
            __cil_tmp52 = (unsigned int )__cil_tmp51;
//#line 90
            store_concrete_value_int((long )__cil_tmp52);
            {
//#line 90
            cover_condition_fun(42, __cil_tmp52 - __cil_tmp48, 13);
//#line 90
            if (__cil_tmp52 == __cil_tmp48) {
//#line 90
              load_to_heap_int((unsigned long )(& __cil_tmp52), (long )__cil_tmp52,
                               17);
//#line 90
              load_to_heap_int((unsigned long )(& __cil_tmp48), (long )__cil_tmp48,
                               17);
//#line 90
              apply_op(1, 13);
//#line 90
              branch(90, 42, 1, 0);
              {
//#line 90
              load_to_heap_int(0UL, 0, 11);
//#line 90
              return (0);
              }
            } else {
//#line 90
              load_to_heap_int((unsigned long )(& __cil_tmp52), (long )__cil_tmp52,
                               17);
//#line 90
              load_to_heap_int((unsigned long )(& __cil_tmp48), (long )__cil_tmp48,
                               17);
//#line 90
              apply_op(1, 13);
//#line 90
              branch(90, 42, 0, 0);
            }
            }
            }
//#line 96
            load_to_heap_int((unsigned long )(& t9), (long )t9, 11);
//#line 96
            store_to_var_table((unsigned long )(& arg1));
//#line 96
            arg1 = (char *)t9;
//#line 96
            store_concrete_value_int((long )arg1);
            {
//#line 97
            load_to_heap_int(0UL, 0, 11);
//#line 97
            store_to_var_table((unsigned long )(& __cil_tmp53));
//#line 97
            __cil_tmp53 = (char *)0;
//#line 97
            store_concrete_value_int((long )__cil_tmp53);
//#line 97
            load_to_heap_int((unsigned long )(& __cil_tmp53), (long )__cil_tmp53,
                             14);
//#line 97
            store_to_var_table((unsigned long )(& __cil_tmp54));
//#line 97
            __cil_tmp54 = (unsigned int )__cil_tmp53;
//#line 97
            store_concrete_value_int((long )__cil_tmp54);
//#line 97
            load_to_heap_int((unsigned long )(& arg1), (long )arg1, 14);
//#line 97
            store_to_var_table((unsigned long )(& __cil_tmp55));
//#line 97
            __cil_tmp55 = (unsigned int )arg1;
//#line 97
            store_concrete_value_int((long )__cil_tmp55);
            {
//#line 97
            cover_condition_fun(47, __cil_tmp55 - __cil_tmp54, 13);
//#line 97
            if (__cil_tmp55 == __cil_tmp54) {
//#line 97
              load_to_heap_int((unsigned long )(& __cil_tmp55), (long )__cil_tmp55,
                               17);
//#line 97
              load_to_heap_int((unsigned long )(& __cil_tmp54), (long )__cil_tmp54,
                               17);
//#line 97
              apply_op(1, 13);
//#line 97
              branch(97, 47, 1, 0);
//#line 98
              load_to_heap_int((unsigned long )(& nullstr), (long )nullstr, 11);
//#line 98
              store_to_var_table((unsigned long )(& arg1));
//#line 98
              arg1 = (char *)nullstr;
//#line 98
              store_concrete_value_int((long )arg1);
            } else {
//#line 97
              load_to_heap_int((unsigned long )(& __cil_tmp55), (long )__cil_tmp55,
                               17);
//#line 97
              load_to_heap_int((unsigned long )(& __cil_tmp54), (long )__cil_tmp54,
                               17);
//#line 97
              apply_op(1, 13);
//#line 97
              branch(97, 47, 0, 0);
            }
            }
            }
//#line 100
            load_to_heap_int((unsigned long )(& t2), (long )t2, 11);
//#line 100
            store_to_var_table((unsigned long )(& arg2));
//#line 100
            arg2 = (char *)t2;
//#line 100
            store_concrete_value_int((long )arg2);
            {
//#line 101
            load_to_heap_int(0UL, 0, 11);
//#line 101
            store_to_var_table((unsigned long )(& __cil_tmp56));
//#line 101
            __cil_tmp56 = (char *)0;
//#line 101
            store_concrete_value_int((long )__cil_tmp56);
//#line 101
            load_to_heap_int((unsigned long )(& __cil_tmp56), (long )__cil_tmp56,
                             14);
//#line 101
            store_to_var_table((unsigned long )(& __cil_tmp57));
//#line 101
            __cil_tmp57 = (unsigned int )__cil_tmp56;
//#line 101
            store_concrete_value_int((long )__cil_tmp57);
//#line 101
            load_to_heap_int((unsigned long )(& arg2), (long )arg2, 14);
//#line 101
            store_to_var_table((unsigned long )(& __cil_tmp58));
//#line 101
            __cil_tmp58 = (unsigned int )arg2;
//#line 101
            store_concrete_value_int((long )__cil_tmp58);
            {
//#line 101
            cover_condition_fun(52, __cil_tmp58 - __cil_tmp57, 13);
//#line 101
            if (__cil_tmp58 == __cil_tmp57) {
//#line 101
              load_to_heap_int((unsigned long )(& __cil_tmp58), (long )__cil_tmp58,
                               17);
//#line 101
              load_to_heap_int((unsigned long )(& __cil_tmp57), (long )__cil_tmp57,
                               17);
//#line 101
              apply_op(1, 13);
//#line 101
              branch(101, 52, 1, 0);
//#line 102
              load_to_heap_int((unsigned long )(& nullstr), (long )nullstr, 11);
//#line 102
              store_to_var_table((unsigned long )(& arg2));
//#line 102
              arg2 = (char *)nullstr;
//#line 102
              store_concrete_value_int((long )arg2);
            } else {
//#line 101
              load_to_heap_int((unsigned long )(& __cil_tmp58), (long )__cil_tmp58,
                               17);
//#line 101
              load_to_heap_int((unsigned long )(& __cil_tmp57), (long )__cil_tmp57,
                               17);
//#line 101
              apply_op(1, 13);
//#line 101
              branch(101, 52, 0, 0);
            }
            }
            }
            {
//#line 104
            cover_condition_fun(54, echo_command_at_execute - 0, 14);
//#line 104
            if (echo_command_at_execute != 0) {
//#line 104
              load_to_heap_int((unsigned long )(& echo_command_at_execute), (long )echo_command_at_execute,
                               11);
//#line 104
              load_to_heap_int(0UL, 0, 11);
//#line 104
              apply_op(1, 14);
//#line 104
              branch(104, 54, 1, 0);
//#line 105
              load_to_heap_int((unsigned long )(& dg), (long )dg, 11);
//#line 105
              load_to_heap_int(0UL, 1, 11);
//#line 105
              apply_op(2, 21);
//#line 105
              store_to_var_table((unsigned long )(& dg));
//#line 105
              dg ++;
//#line 105
              store_concrete_value_int((long )dg);
            } else {
//#line 104
              load_to_heap_int((unsigned long )(& echo_command_at_execute), (long )echo_command_at_execute,
                               11);
//#line 104
              load_to_heap_int(0UL, 0, 11);
//#line 104
              apply_op(1, 14);
//#line 104
              branch(104, 54, 0, 0);
            }
            }
//#line 111
            load_to_heap_int((unsigned long )(& t8), (long )t8, 11);
//#line 111
            store_to_var_table((unsigned long )(& result));
//#line 111
            result = t8;
//#line 111
            store_concrete_value_int((long )result);
            {
//#line 112
            load_to_heap_int((unsigned long )(& nullstr), (long )nullstr, 11);
//#line 112
            store_to_var_table((unsigned long )(& __cil_tmp59));
//#line 112
            __cil_tmp59 = (unsigned int )nullstr;
//#line 112
            store_concrete_value_int((long )__cil_tmp59);
//#line 112
            load_to_heap_int((unsigned long )(& arg1), (long )arg1, 14);
//#line 112
            store_to_var_table((unsigned long )(& __cil_tmp60));
//#line 112
            __cil_tmp60 = (unsigned int )arg1;
//#line 112
            store_concrete_value_int((long )__cil_tmp60);
            {
//#line 112
            cover_condition_fun(59, __cil_tmp60 - __cil_tmp59, 14);
//#line 112
            if (__cil_tmp60 != __cil_tmp59) {
//#line 112
              load_to_heap_int((unsigned long )(& __cil_tmp60), (long )__cil_tmp60,
                               17);
//#line 112
              load_to_heap_int((unsigned long )(& __cil_tmp59), (long )__cil_tmp59,
                               17);
//#line 112
              apply_op(1, 14);
//#line 112
              branch(112, 59, 1, 0);
//#line 114
              load_to_heap_int((unsigned long )(& dg), (long )dg, 11);
//#line 114
              load_to_heap_int(0UL, 1, 11);
//#line 114
              apply_op(2, 21);
//#line 114
              store_to_var_table((unsigned long )(& dg));
//#line 114
              dg ++;
//#line 114
              store_concrete_value_int((long )dg);
            } else {
//#line 112
              load_to_heap_int((unsigned long )(& __cil_tmp60), (long )__cil_tmp60,
                               17);
//#line 112
              load_to_heap_int((unsigned long )(& __cil_tmp59), (long )__cil_tmp59,
                               17);
//#line 112
              apply_op(1, 14);
//#line 112
              branch(112, 59, 0, 0);
            }
            }
            }
            {
//#line 115
            load_to_heap_int((unsigned long )(& nullstr), (long )nullstr, 11);
//#line 115
            store_to_var_table((unsigned long )(& __cil_tmp61));
//#line 115
            __cil_tmp61 = (unsigned int )nullstr;
//#line 115
            store_concrete_value_int((long )__cil_tmp61);
//#line 115
            load_to_heap_int((unsigned long )(& arg2), (long )arg2, 14);
//#line 115
            store_to_var_table((unsigned long )(& __cil_tmp62));
//#line 115
            __cil_tmp62 = (unsigned int )arg2;
//#line 115
            store_concrete_value_int((long )__cil_tmp62);
            {
//#line 115
            cover_condition_fun(63, __cil_tmp62 - __cil_tmp61, 14);
//#line 115
            if (__cil_tmp62 != __cil_tmp61) {
//#line 115
              load_to_heap_int((unsigned long )(& __cil_tmp62), (long )__cil_tmp62,
                               17);
//#line 115
              load_to_heap_int((unsigned long )(& __cil_tmp61), (long )__cil_tmp61,
                               17);
//#line 115
              apply_op(1, 14);
//#line 115
              branch(115, 63, 1, 0);
//#line 117
              load_to_heap_int((unsigned long )(& dg), (long )dg, 11);
//#line 117
              load_to_heap_int(0UL, 1, 11);
//#line 117
              apply_op(2, 21);
//#line 117
              store_to_var_table((unsigned long )(& dg));
//#line 117
              dg ++;
//#line 117
              store_concrete_value_int((long )dg);
            } else {
//#line 115
              load_to_heap_int((unsigned long )(& __cil_tmp62), (long )__cil_tmp62,
                               17);
//#line 115
              load_to_heap_int((unsigned long )(& __cil_tmp61), (long )__cil_tmp61,
                               17);
//#line 115
              apply_op(1, 14);
//#line 115
              branch(115, 63, 0, 0);
            }
            }
            }
          } else {
//#line 88
            load_to_heap_int((unsigned long )(& __cil_tmp46), (long )__cil_tmp46,
                             11);
//#line 88
            load_to_heap_int(0UL, 4, 11);
//#line 88
            apply_op(1, 13);
//#line 88
            branch(88, 39, 0, 0);
//#line 123
            load_to_heap_int(0UL, 1, 11);
//#line 123
            store_to_var_table((unsigned long )(& result));
//#line 123
            result = 1;
//#line 123
            store_concrete_value_int((long )result);
          }
          }
          }
        }
        }
        }
      }
      }
      }
    }
    }
    }
  }
  }
  }
  {
//#line 126
  cover_condition_fun(66, invert - 0, 14);
//#line 126
  if (invert != 0) {
//#line 126
    load_to_heap_int((unsigned long )(& invert), (long )invert, 11);
//#line 126
    load_to_heap_int(0UL, 0, 11);
//#line 126
    apply_op(1, 14);
//#line 126
    branch(126, 66, 1, 0);
    {
//#line 128
    cover_condition_fun(67, result - 0, 13);
//#line 128
    if (result == 0) {
//#line 128
      load_to_heap_int((unsigned long )(& result), (long )result, 11);
//#line 128
      load_to_heap_int(0UL, 0, 11);
//#line 128
      apply_op(1, 13);
//#line 128
      branch(128, 67, 1, 0);
//#line 129
      load_to_heap_int(0UL, 1, 11);
//#line 129
      store_to_var_table((unsigned long )(& result));
//#line 129
      result = 1;
//#line 129
      store_concrete_value_int((long )result);
    } else {
//#line 128
      load_to_heap_int((unsigned long )(& result), (long )result, 11);
//#line 128
      load_to_heap_int(0UL, 0, 11);
//#line 128
      apply_op(1, 13);
//#line 128
      branch(128, 67, 0, 0);
//#line 131
      load_to_heap_int(0UL, 0, 11);
//#line 131
      store_to_var_table((unsigned long )(& result));
//#line 131
      result = 0;
//#line 131
      store_concrete_value_int((long )result);
    }
    }
  } else {
//#line 126
    load_to_heap_int((unsigned long )(& invert), (long )invert, 11);
//#line 126
    load_to_heap_int(0UL, 0, 11);
//#line 126
    apply_op(1, 14);
//#line 126
    branch(126, 66, 0, 0);
  }
  }
  {
//#line 133
  load_to_heap_int((unsigned long )(& result), (long )result, 11);
//#line 133
  return (result);
  }
}
}
//#line 136 "executecondnode.c"
void testme(void) 
{ 
  COND_COM *cond =0;
  int echo_command_at_execute ;
  int t ;
  int t1 ;
  int t2 ;
  int t3 ;
  int t4 ;
  int t5 ;
  int t6 ;
  int t7 ;
  int t8 ;
  int t9 ;
  int t10 ;
  unsigned long __cil_tmp14 ;
  unsigned long __cil_tmp15 ;
  unsigned long __cil_tmp16 ;
  unsigned long __cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  unsigned long __cil_tmp19 ;
  unsigned long __cil_tmp20 ;
  unsigned long __cil_tmp21 ;
  unsigned long __cil_tmp22 ;
  unsigned long __cil_tmp23 ;
  unsigned long __cil_tmp24 ;
  unsigned long __cil_tmp25 ;
  unsigned long __cil_tmp26 ;
  COND_COM **__cil_tmp27 ;
  COND_COM *__cil_tmp28 ;
  int *__cil_tmp29 ;
  int __cil_tmp30 ;
  int *__cil_tmp31 ;
  int __cil_tmp32 ;
  int *__cil_tmp33 ;
  int __cil_tmp34 ;
  int *__cil_tmp35 ;
  int __cil_tmp36 ;
  int *__cil_tmp37 ;
  int __cil_tmp38 ;
  int *__cil_tmp39 ;
  int __cil_tmp40 ;
  int *__cil_tmp41 ;
  int __cil_tmp42 ;
  int *__cil_tmp43 ;
  int __cil_tmp44 ;
  int *__cil_tmp45 ;
  int __cil_tmp46 ;
  int *__cil_tmp47 ;
  int __cil_tmp48 ;
  int *__cil_tmp49 ;
  int __cil_tmp50 ;
  int *__cil_tmp51 ;
  int __cil_tmp52 ;

  {
  set_main_function_id(1);
  {
//#line 140
  load_to_heap_int((unsigned long )(& cond), (long )cond, 14);
//#line 140
  apply_op(2, 27);
//#line 140
  store_to_var_table((unsigned long )(& __cil_tmp14));
//#line 140
  __cil_tmp14 = (unsigned long )(& cond);
//#line 140
  store_concrete_value_int((long )__cil_tmp14);
//#line 140
  _cf__getInput(__cil_tmp14);
//#line 141
  load_to_heap_int((unsigned long )(& echo_command_at_execute), (long )echo_command_at_execute,
                   11);
//#line 141
  apply_op(2, 27);
//#line 141
  store_to_var_table((unsigned long )(& __cil_tmp15));
//#line 141
  __cil_tmp15 = (unsigned long )(& echo_command_at_execute);
//#line 141
  store_concrete_value_int((long )__cil_tmp15);
//#line 141
  _cf__getInput(__cil_tmp15);
//#line 142
  load_to_heap_int((unsigned long )(& t), (long )t, 11);
//#line 142
  apply_op(2, 27);
//#line 142
  store_to_var_table((unsigned long )(& __cil_tmp16));
//#line 142
  __cil_tmp16 = (unsigned long )(& t);
//#line 142
  store_concrete_value_int((long )__cil_tmp16);
//#line 142
  _cf__getInput(__cil_tmp16);
//#line 143
  load_to_heap_int((unsigned long )(& t1), (long )t1, 11);
//#line 143
  apply_op(2, 27);
//#line 143
  store_to_var_table((unsigned long )(& __cil_tmp17));
//#line 143
  __cil_tmp17 = (unsigned long )(& t1);
//#line 143
  store_concrete_value_int((long )__cil_tmp17);
//#line 143
  _cf__getInput(__cil_tmp17);
//#line 144
  load_to_heap_int((unsigned long )(& t2), (long )t2, 11);
//#line 144
  apply_op(2, 27);
//#line 144
  store_to_var_table((unsigned long )(& __cil_tmp18));
//#line 144
  __cil_tmp18 = (unsigned long )(& t2);
//#line 144
  store_concrete_value_int((long )__cil_tmp18);
//#line 144
  _cf__getInput(__cil_tmp18);
//#line 145
  load_to_heap_int((unsigned long )(& t3), (long )t3, 11);
//#line 145
  apply_op(2, 27);
//#line 145
  store_to_var_table((unsigned long )(& __cil_tmp19));
//#line 145
  __cil_tmp19 = (unsigned long )(& t3);
//#line 145
  store_concrete_value_int((long )__cil_tmp19);
//#line 145
  _cf__getInput(__cil_tmp19);
//#line 146
  load_to_heap_int((unsigned long )(& t4), (long )t4, 11);
//#line 146
  apply_op(2, 27);
//#line 146
  store_to_var_table((unsigned long )(& __cil_tmp20));
//#line 146
  __cil_tmp20 = (unsigned long )(& t4);
//#line 146
  store_concrete_value_int((long )__cil_tmp20);
//#line 146
  _cf__getInput(__cil_tmp20);
//#line 147
  load_to_heap_int((unsigned long )(& t5), (long )t5, 11);
//#line 147
  apply_op(2, 27);
//#line 147
  store_to_var_table((unsigned long )(& __cil_tmp21));
//#line 147
  __cil_tmp21 = (unsigned long )(& t5);
//#line 147
  store_concrete_value_int((long )__cil_tmp21);
//#line 147
  _cf__getInput(__cil_tmp21);
//#line 148
  load_to_heap_int((unsigned long )(& t6), (long )t6, 11);
//#line 148
  apply_op(2, 27);
//#line 148
  store_to_var_table((unsigned long )(& __cil_tmp22));
//#line 148
  __cil_tmp22 = (unsigned long )(& t6);
//#line 148
  store_concrete_value_int((long )__cil_tmp22);
//#line 148
  _cf__getInput(__cil_tmp22);
//#line 149
  load_to_heap_int((unsigned long )(& t7), (long )t7, 11);
//#line 149
  apply_op(2, 27);
//#line 149
  store_to_var_table((unsigned long )(& __cil_tmp23));
//#line 149
  __cil_tmp23 = (unsigned long )(& t7);
//#line 149
  store_concrete_value_int((long )__cil_tmp23);
//#line 149
  _cf__getInput(__cil_tmp23);
//#line 150
  load_to_heap_int((unsigned long )(& t8), (long )t8, 11);
//#line 150
  apply_op(2, 27);
//#line 150
  store_to_var_table((unsigned long )(& __cil_tmp24));
//#line 150
  __cil_tmp24 = (unsigned long )(& t8);
//#line 150
  store_concrete_value_int((long )__cil_tmp24);
//#line 150
  _cf__getInput(__cil_tmp24);
//#line 151
  load_to_heap_int((unsigned long )(& t9), (long )t9, 11);
//#line 151
  apply_op(2, 27);
//#line 151
  store_to_var_table((unsigned long )(& __cil_tmp25));
//#line 151
  __cil_tmp25 = (unsigned long )(& t9);
//#line 151
  store_concrete_value_int((long )__cil_tmp25);
//#line 151
  _cf__getInput(__cil_tmp25);
//#line 152
  load_to_heap_int((unsigned long )(& t10), (long )t10, 11);
//#line 152
  apply_op(2, 27);
//#line 152
  store_to_var_table((unsigned long )(& __cil_tmp26));
//#line 152
  __cil_tmp26 = (unsigned long )(& t10);
//#line 152
  store_concrete_value_int((long )__cil_tmp26);
//#line 152
  _cf__getInput(__cil_tmp26);
//#line 154
  load_to_heap_int((unsigned long )(& cond), (long )cond, 14);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp27));
//#line 154
  __cil_tmp27 = & cond;
//#line 154
  store_concrete_value_int((long )__cil_tmp27);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp27), (long )__cil_tmp27, 14);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp28));
//#line 154
  __cil_tmp28 = *__cil_tmp27;
//#line 154
  store_concrete_value_int((long )__cil_tmp28);
//#line 154
  load_to_heap_int((unsigned long )(& echo_command_at_execute), (long )echo_command_at_execute,
                   11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp29));
//#line 154
  __cil_tmp29 = & echo_command_at_execute;
//#line 154
  store_concrete_value_int((long )__cil_tmp29);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp29), (long )__cil_tmp29, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp30));
//#line 154
  __cil_tmp30 = *__cil_tmp29;
//#line 154
  store_concrete_value_int((long )__cil_tmp30);
//#line 154
  load_to_heap_int((unsigned long )(& t), (long )t, 11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp31));
//#line 154
  __cil_tmp31 = & t;
//#line 154
  store_concrete_value_int((long )__cil_tmp31);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp31), (long )__cil_tmp31, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp32));
//#line 154
  __cil_tmp32 = *__cil_tmp31;
//#line 154
  store_concrete_value_int((long )__cil_tmp32);
//#line 154
  load_to_heap_int((unsigned long )(& t1), (long )t1, 11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp33));
//#line 154
  __cil_tmp33 = & t1;
//#line 154
  store_concrete_value_int((long )__cil_tmp33);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp33), (long )__cil_tmp33, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp34));
//#line 154
  __cil_tmp34 = *__cil_tmp33;
//#line 154
  store_concrete_value_int((long )__cil_tmp34);
//#line 154
  load_to_heap_int((unsigned long )(& t2), (long )t2, 11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp35));
//#line 154
  __cil_tmp35 = & t2;
//#line 154
  store_concrete_value_int((long )__cil_tmp35);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp35), (long )__cil_tmp35, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp36));
//#line 154
  __cil_tmp36 = *__cil_tmp35;
//#line 154
  store_concrete_value_int((long )__cil_tmp36);
//#line 154
  load_to_heap_int((unsigned long )(& t3), (long )t3, 11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp37));
//#line 154
  __cil_tmp37 = & t3;
//#line 154
  store_concrete_value_int((long )__cil_tmp37);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp37), (long )__cil_tmp37, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp38));
//#line 154
  __cil_tmp38 = *__cil_tmp37;
//#line 154
  store_concrete_value_int((long )__cil_tmp38);
//#line 154
  load_to_heap_int((unsigned long )(& t4), (long )t4, 11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp39));
//#line 154
  __cil_tmp39 = & t4;
//#line 154
  store_concrete_value_int((long )__cil_tmp39);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp39), (long )__cil_tmp39, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp40));
//#line 154
  __cil_tmp40 = *__cil_tmp39;
//#line 154
  store_concrete_value_int((long )__cil_tmp40);
//#line 154
  load_to_heap_int((unsigned long )(& t5), (long )t5, 11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp41));
//#line 154
  __cil_tmp41 = & t5;
//#line 154
  store_concrete_value_int((long )__cil_tmp41);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp41), (long )__cil_tmp41, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp42));
//#line 154
  __cil_tmp42 = *__cil_tmp41;
//#line 154
  store_concrete_value_int((long )__cil_tmp42);
//#line 154
  load_to_heap_int((unsigned long )(& t6), (long )t6, 11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp43));
//#line 154
  __cil_tmp43 = & t6;
//#line 154
  store_concrete_value_int((long )__cil_tmp43);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp43), (long )__cil_tmp43, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp44));
//#line 154
  __cil_tmp44 = *__cil_tmp43;
//#line 154
  store_concrete_value_int((long )__cil_tmp44);
//#line 154
  load_to_heap_int((unsigned long )(& t7), (long )t7, 11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp45));
//#line 154
  __cil_tmp45 = & t7;
//#line 154
  store_concrete_value_int((long )__cil_tmp45);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp45), (long )__cil_tmp45, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp46));
//#line 154
  __cil_tmp46 = *__cil_tmp45;
//#line 154
  store_concrete_value_int((long )__cil_tmp46);
//#line 154
  load_to_heap_int((unsigned long )(& t8), (long )t8, 11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp47));
//#line 154
  __cil_tmp47 = & t8;
//#line 154
  store_concrete_value_int((long )__cil_tmp47);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp47), (long )__cil_tmp47, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp48));
//#line 154
  __cil_tmp48 = *__cil_tmp47;
//#line 154
  store_concrete_value_int((long )__cil_tmp48);
//#line 154
  load_to_heap_int((unsigned long )(& t9), (long )t9, 11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp49));
//#line 154
  __cil_tmp49 = & t9;
//#line 154
  store_concrete_value_int((long )__cil_tmp49);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp49), (long )__cil_tmp49, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp50));
//#line 154
  __cil_tmp50 = *__cil_tmp49;
//#line 154
  store_concrete_value_int((long )__cil_tmp50);
//#line 154
  load_to_heap_int((unsigned long )(& t10), (long )t10, 11);
//#line 154
  apply_op(2, 27);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp51));
//#line 154
  __cil_tmp51 = & t10;
//#line 154
  store_concrete_value_int((long )__cil_tmp51);
//#line 154
  load_to_heap_int((unsigned long )(& __cil_tmp51), (long )__cil_tmp51, 11);
//#line 154
  apply_op(2, 28);
//#line 154
  store_to_var_table((unsigned long )(& __cil_tmp52));
//#line 154
  __cil_tmp52 = *__cil_tmp51;
//#line 154
  store_concrete_value_int((long )__cil_tmp52);
//#line 154
  argu_push((unsigned long )(& __cil_tmp28), 14);
//#line 154
  argu_push((unsigned long )(& __cil_tmp30), 11);
//#line 154
  argu_push((unsigned long )(& __cil_tmp32), 11);
//#line 154
  argu_push((unsigned long )(& __cil_tmp34), 11);
//#line 154
  argu_push((unsigned long )(& __cil_tmp36), 11);
//#line 154
  argu_push((unsigned long )(& __cil_tmp38), 11);
//#line 154
  argu_push((unsigned long )(& __cil_tmp40), 11);
//#line 154
  argu_push((unsigned long )(& __cil_tmp42), 11);
//#line 154
  argu_push((unsigned long )(& __cil_tmp44), 11);
//#line 154
  argu_push((unsigned long )(& __cil_tmp46), 11);
//#line 154
  argu_push((unsigned long )(& __cil_tmp48), 11);
//#line 154
  argu_push((unsigned long )(& __cil_tmp50), 11);
//#line 154
  argu_push((unsigned long )(& __cil_tmp52), 11);
//#line 154
  para_num_stack_push(13);
//#line 154
  execute_cond_node(__cil_tmp28, __cil_tmp30, __cil_tmp32, __cil_tmp34, __cil_tmp36,
                    __cil_tmp38, __cil_tmp40, __cil_tmp42, __cil_tmp44, __cil_tmp46,
                    __cil_tmp48, __cil_tmp50, __cil_tmp52);
  }
//#line 155
  return;
}
}
void get_test_case_ptr_COND_COM_of_level_1(unsigned long);
void get_test_case_struct_cond_com(unsigned long);
void get_test_case_ptr_cond_com_of_level_1(unsigned long);
void get_test_case_ptr_WORD_DESC_of_level_1(unsigned long);
void get_test_case_struct_word_desc(unsigned long);
void get_test_case_array_char(unsigned long, int);
void get_test_case_ptr_COND_COM_of_level_1(unsigned long addr_old)
{
	long addr = abstract_ptr_handle(addr_old, sizeof(COND_COM));
	if(addr > 0)
	{
		get_test_case_struct_cond_com((unsigned long)addr);
	}
}
void get_test_case_struct_cond_com(unsigned long address)
{
	struct cond_com* tmp;
	unsigned long addr;
	tmp = (struct cond_com*) address;
	addr = (unsigned long)&(tmp->flags);
	get_test_case_int((unsigned long)addr);
	addr = (unsigned long)&(tmp->line);
	get_test_case_int((unsigned long)addr);
	addr = (unsigned long)&(tmp->type);
	get_test_case_int((unsigned long)addr);
	addr = (unsigned long)&(tmp->op);
	get_test_case_ptr_WORD_DESC_of_level_1((unsigned long)addr);
	addr = (unsigned long)&(tmp->left);
	get_test_case_ptr_cond_com_of_level_1((unsigned long)addr);
	addr = (unsigned long)&(tmp->right);
	get_test_case_ptr_cond_com_of_level_1((unsigned long)addr);

}
void get_test_case_ptr_cond_com_of_level_1(unsigned long addr_old)
{
	long addr = abstract_ptr_handle(addr_old, sizeof(struct cond_com));
	if(addr > 0)
	{
		get_test_case_struct_cond_com((unsigned long)addr);
	}
}
void get_test_case_ptr_WORD_DESC_of_level_1(unsigned long addr_old)
{
	long addr = abstract_ptr_handle(addr_old, sizeof(WORD_DESC));
	if(addr > 0)
	{
		get_test_case_struct_word_desc((unsigned long)addr);
	}
}
void get_test_case_struct_word_desc(unsigned long address)
{
	struct word_desc* tmp;
	unsigned long addr;
	tmp = (struct word_desc*) address;
	addr = (unsigned long)&(tmp->word);
	get_test_case_array_char(addr, 3);
	addr = (unsigned long)&(tmp->flags);
	get_test_case_int((unsigned long)addr);

}
void get_test_case_array_char(unsigned long addr, int index)
{
	int i;
	array_declaration(addr, index, 15, sizeof(char));
	for(i = 0; i < index; i++)
	{
		get_test_case_char((unsigned long)addr);
		addr += sizeof(char);
	}
}

void _cf__getInput(unsigned long addr)
{
	int id = get_input_id();
	switch(id)
	{
	case 0:
		get_test_case_ptr_COND_COM_of_level_1((unsigned long)addr);
		break;
	case 1:
		get_test_case_int((unsigned long)addr);
		break;
	case 2:
		get_test_case_int((unsigned long)addr);
		break;
	case 3:
		get_test_case_int((unsigned long)addr);
		break;
	case 4:
		get_test_case_int((unsigned long)addr);
		break;
	case 5:
		get_test_case_int((unsigned long)addr);
		break;
	case 6:
		get_test_case_int((unsigned long)addr);
		break;
	case 7:
		get_test_case_int((unsigned long)addr);
		break;
	case 8:
		get_test_case_int((unsigned long)addr);
		break;
	case 9:
		get_test_case_int((unsigned long)addr);
		break;
	case 10:
		get_test_case_int((unsigned long)addr);
		break;
	case 11:
		get_test_case_int((unsigned long)addr);
		break;
	case 12:
		get_test_case_int((unsigned long)addr);
		break;
	}
}
void main(int argc, char *argv[])
{
	init_caut(argc,argv);
	init_coverage_driven_testing_framework();
	while(1){
		init_caut_exec();
		testme();
		solve_caut_exec();
	}
}
