#include"../caut.h"
/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is true */

//#line 3 "pointer.c"
int pointer(int **pp ) 
{ 
  int **__cil_tmp2 ;
  unsigned int __cil_tmp3 ;
  unsigned int __cil_tmp4 ;
  int *__cil_tmp5 ;
  unsigned int __cil_tmp6 ;

  {
  set_main_function_id(0);
  para_pop((unsigned long )(& pp));
  {
//#line 5
  load_to_heap_int(0UL, 0, 11);
//#line 5
  store_to_var_table((unsigned long )(& __cil_tmp2));
//#line 5
  __cil_tmp2 = (int **)0;
//#line 5
  store_concrete_value_int((long )__cil_tmp2);
//#line 5
  load_to_heap_int((unsigned long )(& __cil_tmp2), (long )__cil_tmp2, 14);
//#line 5
  store_to_var_table((unsigned long )(& __cil_tmp3));
//#line 5
  __cil_tmp3 = (unsigned int )__cil_tmp2;
//#line 5
  store_concrete_value_int((long )__cil_tmp3);
//#line 5
  load_to_heap_int((unsigned long )(& pp), (long )pp, 14);
//#line 5
  store_to_var_table((unsigned long )(& __cil_tmp4));
//#line 5
  __cil_tmp4 = (unsigned int )pp;
//#line 5
  store_concrete_value_int((long )__cil_tmp4);
  {
//#line 5
  cover_condition_fun(3, __cil_tmp4 - __cil_tmp3, 13);
//#line 5
  if (__cil_tmp4 == __cil_tmp3) {
//#line 5
    load_to_heap_int((unsigned long )(& __cil_tmp4), (long )__cil_tmp4, 17);
//#line 5
    load_to_heap_int((unsigned long )(& __cil_tmp3), (long )__cil_tmp3, 17);
//#line 5
    apply_op(1, 13);
//#line 5
    branch(5, 3, 1, 0);
    {
//#line 6
    load_to_heap_int(0UL, 0, 11);
//#line 6
    return (0);
    }
  } else {
//#line 5
    load_to_heap_int((unsigned long )(& __cil_tmp4), (long )__cil_tmp4, 17);
//#line 5
    load_to_heap_int((unsigned long )(& __cil_tmp3), (long )__cil_tmp3, 17);
//#line 5
    apply_op(1, 13);
//#line 5
    branch(5, 3, 0, 0);
    {
//#line 9
    load_to_heap_int((unsigned long )(& pp), (long )pp, 14);
//#line 9
    apply_op(2, 28);
//#line 9
    store_to_var_table((unsigned long )(& __cil_tmp5));
//#line 9
    __cil_tmp5 = *pp;
//#line 9
    store_concrete_value_int((long )__cil_tmp5);
//#line 9
    load_to_heap_int((unsigned long )(& __cil_tmp5), (long )__cil_tmp5, 14);
//#line 9
    store_to_var_table((unsigned long )(& __cil_tmp6));
//#line 9
    __cil_tmp6 = (unsigned int )__cil_tmp5;
//#line 9
    store_concrete_value_int((long )__cil_tmp6);
    {
//#line 9
    cover_condition_fun(7, __cil_tmp6 - 5U, 13);
//#line 9
    if (__cil_tmp6 == 5U) {
//#line 9
      load_to_heap_int((unsigned long )(& __cil_tmp6), (long )__cil_tmp6, 17);
//#line 9
      load_to_heap_int(0UL, 5U, 17);
//#line 9
      apply_op(1, 13);
//#line 9
      branch(9, 7, 1, 0);
      {
//#line 10
      load_to_heap_int(0UL, 1, 11);
//#line 10
      return (1);
      }
    } else {
//#line 9
      load_to_heap_int((unsigned long )(& __cil_tmp6), (long )__cil_tmp6, 17);
//#line 9
      load_to_heap_int(0UL, 5U, 17);
//#line 9
      apply_op(1, 13);
//#line 9
      branch(9, 7, 0, 0);
    }
    }
    }
  }
  }
  }
  {
//#line 13
  load_to_heap_int(0UL, 0, 11);
//#line 13
  return (0);
  }
}
}
void testme(void) 
{ 
  int **pp ;
  unsigned long __cil_tmp2 ;

  {
  set_main_function_id(1);
//#line 3
  store_input_var("pp", & pp, "int **");
//#line 3
  load_to_heap_int((unsigned long )(& pp), (long )pp, 14);
//#line 3
  apply_op(2, 27);
//#line 3
  store_to_var_table((unsigned long )(& __cil_tmp2));
//#line 3
  __cil_tmp2 = (unsigned long )(& pp);
//#line 3
  store_concrete_value_int((long )__cil_tmp2);
//#line 3
  _cf__getInput(__cil_tmp2);
//#line 3
  print_testcase();
//#line 3
  argu_push((unsigned long )(& pp), 14);
//#line 3
  para_num_stack_push(1);
//#line 3
  pointer(pp);
}
}
void __CAUT_register_types(void) 
{ 
  __CAUT_ctype_t __CAUT_t ;
  int __CAUT_reg_ret ;
  int __cil_tmp3[1] ;

  {
  __CAUT_t = __CAUT_create_primitive_type("void", 4, sizeof(void ), 0);
  __CAUT_reg_ret = __CAUT_register_datatype(0, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("char", 4, sizeof(char ), 1);
  __CAUT_reg_ret = __CAUT_register_datatype(1, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("signed char", 11, sizeof(signed char ),
                                          2);
  __CAUT_reg_ret = __CAUT_register_datatype(2, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("short", 5, sizeof(short ), 3);
  __CAUT_reg_ret = __CAUT_register_datatype(3, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("int", 3, sizeof(int ), 4);
  __CAUT_reg_ret = __CAUT_register_datatype(4, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("long", 4, sizeof(long ), 5);
  __CAUT_reg_ret = __CAUT_register_datatype(5, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("long long", 9, sizeof(long long ), 6);
  __CAUT_reg_ret = __CAUT_register_datatype(6, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("unsigned char", 13, sizeof(unsigned char ),
                                          7);
  __CAUT_reg_ret = __CAUT_register_datatype(7, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("unsigned short", 14, sizeof(unsigned short ),
                                          8);
  __CAUT_reg_ret = __CAUT_register_datatype(8, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("unsigned int", 12, sizeof(unsigned int ),
                                          9);
  __CAUT_reg_ret = __CAUT_register_datatype(9, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("unsigned long", 13, sizeof(unsigned long ),
                                          10);
  __CAUT_reg_ret = __CAUT_register_datatype(10, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("unsigned long long", 18, sizeof(unsigned long long ),
                                          11);
  __CAUT_reg_ret = __CAUT_register_datatype(11, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("float", 5, sizeof(float ), 12);
  __CAUT_reg_ret = __CAUT_register_datatype(12, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("double", 6, sizeof(double ), 13);
  __CAUT_reg_ret = __CAUT_register_datatype(13, __CAUT_t);
  __CAUT_t = __CAUT_create_primitive_type("long double", 11, sizeof(long double ),
                                          14);
  __CAUT_reg_ret = __CAUT_register_datatype(14, __CAUT_t);
  __cil_tmp3[0] = 21;
  __CAUT_t = __CAUT_create_func_type("r_int_a_int * *_", 16, 1, __cil_tmp3, 4);
  __CAUT_reg_ret = __CAUT_register_datatype(20, __CAUT_t);
  __CAUT_t = __CAUT_create_pointer_type("int * *", 7, 22);
  __CAUT_reg_ret = __CAUT_register_datatype(21, __CAUT_t);
  __CAUT_t = __CAUT_create_pointer_type("int *", 5, 4);
  __CAUT_reg_ret = __CAUT_register_datatype(22, __CAUT_t);
  __CAUT_t = __CAUT_create_func_type("r_void_a_", 9, 0, 0, 0);
  __CAUT_reg_ret = __CAUT_register_datatype(23, __CAUT_t);
  return;
}
}
void get_test_case_ptr_int_of_level_1(unsigned long);
void get_test_case_ptr_int_of_level_2(unsigned long);
void get_test_case_ptr_int_of_level_1(unsigned long addr_old)
{
	long addr = abstract_ptr_handle(addr_old, sizeof(int));
	if(addr > 0)
	{
		get_test_case_int((unsigned long)addr);
	}
}
void get_test_case_ptr_int_of_level_2(unsigned long addr_old)
{
	long addr = abstract_ptr_handle(addr_old, sizeof(void *));
	if(addr > 0)
	{
		get_test_case_ptr_int_of_level_1((unsigned long)addr);
	}
}
void _cf__getInput(unsigned long addr)
{
	int id = get_input_id();
	switch(id)
	{
	case 0:
		get_test_case_ptr_int_of_level_2((unsigned long)addr);
		break;
	}
}
void main(int argc, char *argv[])
{
	init_caut(argc,argv);
	init_coverage_driven_testing_framework();
	while(1){
		init_caut_exec();
		testme();
		solve_caut_exec();
	}
}
