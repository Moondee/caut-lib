rm -rf *.o *.a
gcc -g -I ../../include/core/ -c branch_coverage.c
gcc -g -I ../../include/core/ -c cfg.c
gcc -g -I ../../include/core/ -c path.c
gcc -g -I ../../include/core/ -c dump.c
gcc -g -I ../../include/core/ -c symbolic.c
gcc -g -I ../../include/core/ -c constraint_solve.c
gcc -g -I ../../include/core/ -c constraint_optimize.c
gcc -g -I ../../include/core/ -c get_test_case.c
gcc -g -I ../../include/core/ -c runtime.c
gcc -g -I ../../include/core/ -c fitness.c
ar -rcs caut-bc.a branch_coverage.o cfg.o path.o dump.o symbolic.o constraint_solve.o constraint_optimize.o get_test_case.o runtime.o fitness.o ../../Sqlite/sqlite3.o ../DataStructure/list.o ../DataStructure/stack.o
bubble
rm -rf bubble *.tpl *.lst *.cautlog
gcc -g -o bubble -I .. -L ../lpsolve bubble.cil.c ../src/core/caut-bc.a -ldl -llpsolve55 -ldl -lpthread
[cfg.c->create_cfg_from_database_file()] load database file ...
[cfg.c->create_cfg_from_database_file()] malloc CFG structure ... 
[cfg.c->create_cfg_from_database_file()] node_count = 6
[cfg.c->create_cfg_from_database_file()] create cfg successfully!
[branchcoverage.c->cs_create()] create cs successfully!

(0xdf>=6)  #6   1   0 

(0xdf>1)  #8   7   0 
[branch_coverage.c --> cs_update()] cfg_branch_id: 0 --> choice: 0
[branch_coverage.c --> cs_update()] cfg_branch_id: 6 --> choice: 0

[update effective path prefix pool...]

[generating new path prefixes...]
0 1 
--> complete, must-effective

[a new (may/must)effective path prefix] 
01
potential uncovered nodes:  2
1 
--> complete, must-effective

[a new (may/must)effective path prefix] 
1
potential uncovered nodes:  0

valid must-effective path prefix count : 2 
valid may-effective path prefix count : 0 

[choosing the Hill Climbing[must] prefix to run...] 
0 1 
potential to be covered cnt = 2 
((6-0xdf)-1)(((6-0xdf)-1)+((0xdf-1)-1))
(0xdf>=6)  #6   1   0 

(0xdf>1)  #8   7   1 

(1<0xdf)  #9   13   1 

(*(0xf7[1])>*(0xf7[2]))  #10   17   0 

(2<0xdf)  #9   13   0 

((0xdf-1)>1)  #8   7   0 
[branch_coverage.c --> cs_update()] cfg_branch_id: 0 --> choice: 0
[branch_coverage.c --> cs_update()] cfg_branch_id: 6 --> choice: 1
[branch_coverage.c --> cs_update()] cfg_branch_id: 12 --> choice: 1
[branch_coverage.c --> cs_update()] cfg_branch_id: 14 --> choice: 0
[branch_coverage.c --> cs_update()] cfg_branch_id: 12 --> choice: 0
[branch_coverage.c --> cs_update()] cfg_branch_id: 6 --> choice: 0

[update effective path prefix pool...]
1 
--> complete, must-effective
must-effective  --> must-effective,keep

[generating new path prefixes...]
0 1 1 0 0 1 
--> complete, may-effective

[a new (may/must)effective path prefix] 
011001
potential uncovered nodes:  1
0 1 1 0 1 
--> complete, may-effective

[a new (may/must)effective path prefix] 
01101
potential uncovered nodes:  1
0 1 1 1 
--> complete, must-effective

[a new (may/must)effective path prefix] 
0111
potential uncovered nodes:  1
0 1 0 
--> complete, may-effective

[a new (may/must)effective path prefix] 
010
potential uncovered nodes:  0

valid must-effective path prefix count : 2 
valid may-effective path prefix count : 3 

[choosing the Hill Climbing[must] prefix to run...] 
1 
potential to be covered cnt = 0 

(0xdf>=6)  #6   1   1 
[branch_coverage.c --> cs_update()] cfg_branch_id: 0 --> choice: 1

[update effective path prefix pool...]
0 1 1 0 0 1 
--> complete, may-effective
may-effective  --> may-effective,keep
0 1 1 0 1 
--> complete, may-effective
may-effective  --> may-effective,keep
0 1 1 1 
--> complete, must-effective
must-effective  --> must-effective,keep
0 1 0 
--> complete, may-effective
may-effective  --> may-effective,keep

[generating new path prefixes...]

valid must-effective path prefix count : 1 
valid may-effective path prefix count : 3 

[choosing the Hill Climbing[must] prefix to run...] 
0 1 1 1 
potential to be covered cnt = 1 

(0xdf>=6)  #6   1   1 
[branch_coverage.c --> cs_update()] cfg_branch_id: 0 --> choice: 1

[update effective path prefix pool...]
0 1 1 0 0 1 
--> complete, may-effective
may-effective  --> may-effective,keep
0 1 1 0 1 
--> complete, may-effective
may-effective  --> may-effective,keep
0 1 0 
--> complete, may-effective
may-effective  --> may-effective,keep

[generating new path prefixes...]

valid must-effective path prefix count : 0 
valid may-effective path prefix count : 3 

[choosing the Hill Climbing[may] prefix to run...] 
0 1 1 0 0 1 
uncovered cnt = 1 
(2-0xdf)((2-0xdf)+(((0xdf-1)-1)-1))
WARNING: INFEASIBLE PATH!

valid must-effective path prefix count : 0 
valid may-effective path prefix count : 2 

[choosing the Hill Climbing[may] prefix to run...] 
0 1 1 0 1 
uncovered cnt = 1 
((0xdf-1)-1)(((0xdf-1)-1)+((0xdf-2)-1))((0xdf-1)-1)(((0xdf-1)-1)+((0xdf-2)-1))((6-0xdf)-1)(((6-0xdf)-1)+((0xdf-2)-1))
(0xdf>=6)  #6   1   0 

(0xdf>1)  #8   7   1 

(1<0xdf)  #9   13   1 

(*(0xf7[1])>*(0xf7[2]))  #10   17   1 

(2<0xdf)  #9   13   1 

(*(0xf7[1])>*(0xf7[3]))  #10   17   1 

(3<0xdf)  #9   13   0 

((0xdf-1)>1)  #8   7   1 

(1<(0xdf-1))  #9   13   1 

(*(0xf7[2])>*(0xf7[3]))  #10   17   0 

(2<(0xdf-1))  #9   13   0 

(((0xdf-1)-1)>1)  #8   7   0 
[branch_coverage.c --> cs_update()] cfg_branch_id: 0 --> choice: 0
[branch_coverage.c --> cs_update()] cfg_branch_id: 6 --> choice: 1
[branch_coverage.c --> cs_update()] cfg_branch_id: 12 --> choice: 1
[branch_coverage.c --> cs_update()] cfg_branch_id: 14 --> choice: 1
[branch_coverage.c --> cs_update()] cfg_branch_id: 12 --> choice: 1
[branch_coverage.c --> cs_update()] cfg_branch_id: 14 --> choice: 1
[branch_coverage.c --> cs_update()] cfg_branch_id: 12 --> choice: 0
[branch_coverage.c --> cs_update()] cfg_branch_id: 6 --> choice: 1
[branch_coverage.c --> cs_update()] cfg_branch_id: 12 --> choice: 1
[branch_coverage.c --> cs_update()] cfg_branch_id: 14 --> choice: 0
[branch_coverage.c --> cs_update()] cfg_branch_id: 12 --> choice: 0
[branch_coverage.c --> cs_update()] cfg_branch_id: 6 --> choice: 0

[update effective path prefix pool...]
0 1 0 
--> complete, may-effective
may-effective  --> may-effective,keep
No new test case!
no new path!
Test Over! ;) 

